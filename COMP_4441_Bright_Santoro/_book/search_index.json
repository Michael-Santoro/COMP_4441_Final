[["index.html", "KMeans_Testing Chapter 1 Index", " KMeans_Testing Emma Bright 5/14/2021 Chapter 1 Index "],["introduction.html", "Chapter 2 Introduction 2.1 The Research Question 2.2 Statistical or Analytical Method 2.3 Variables in the Data that will be used for Analysis", " Chapter 2 Introduction 2.1 The Research Question Our final project will explore the relationship between the outcome of two dependent variables of wine, value and quality, and their chemical composition: including measures such as acidity, residual sugar, and alcohol percentage. A predictive model for pricing and quality of wine can provide guidance to small wineries and vineyards, especially those from less established wine regions, so that they can more accurately price their inventory and ensure a better return on investment. What is the quality of wine based on its quantitative characteristics (Fixed Acidity, Volatile Acidity, Citric Acid, Residual Sugar, Chlorides, Free Sulfur Dioxide, Total Sulfur Dioxide, Density, pH, Sulphates, and Alcohol)? 2.2 Statistical or Analytical Method LASSO Regression, Random Forests, and K-Nearest 2.3 Variables in the Data that will be used for Analysis Our analysis will include the following x-variables, output, or outcome variables: Fixed Acidity, Volatile Acidity, Citric Acid, Residual Sugar, Chlorides, Free Sulfur Dioxide, Total Sulfur Dioxide, Density, pH, Sulphates, and Alcohol. The dependent, y-variables of our analysis will be: Quality, Price (Value). "],["descriptive-statistics.html", "Chapter 3 Descriptive Statistics 3.1 The Data 3.2 Data Exploration and Descr Statistics 3.3 Univariate Exploration 3.4 Bivariate Exploration 3.5 Multivariate Exploration", " Chapter 3 Descriptive Statistics 3.1 The Data We have taken a data-set from Kaggle: https://www.kaggle.com/uciml/red-wine-quality-cortez-et-al-2009 This data-set inlcudes the measurements from the wine along with its quality rating. df&lt;-read.table(&quot;data/winequality-red.csv&quot;,stringsAsFactors = FALSE, sep=&quot;,&quot;,header = TRUE) head(df) ## fixed.acidity volatile.acidity citric.acid residual.sugar chlorides free.sulfur.dioxide total.sulfur.dioxide density pH sulphates alcohol ## 1 7.4 0.70 0.00 1.9 0.076 11 34 0.9978 3.51 0.56 9.4 ## 2 7.8 0.88 0.00 2.6 0.098 25 67 0.9968 3.20 0.68 9.8 ## 3 7.8 0.76 0.04 2.3 0.092 15 54 0.9970 3.26 0.65 9.8 ## 4 11.2 0.28 0.56 1.9 0.075 17 60 0.9980 3.16 0.58 9.8 ## 5 7.4 0.70 0.00 1.9 0.076 11 34 0.9978 3.51 0.56 9.4 ## 6 7.4 0.66 0.00 1.8 0.075 13 40 0.9978 3.51 0.56 9.4 ## quality ## 1 5 ## 2 5 ## 3 5 ## 4 6 ## 5 5 ## 6 5 3.2 Data Exploration and Descr Statistics stat.desc(df) ## fixed.acidity volatile.acidity citric.acid residual.sugar chlorides free.sulfur.dioxide total.sulfur.dioxide density ## nbr.val 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 ## nbr.null 0.000000e+00 0.000000e+00 1.320000e+02 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 ## nbr.na 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 ## min 4.600000e+00 1.200000e-01 0.000000e+00 9.000000e-01 1.200000e-02 1.000000e+00 6.000000e+00 9.900700e-01 ## max 1.590000e+01 1.580000e+00 1.000000e+00 1.550000e+01 6.110000e-01 7.200000e+01 2.890000e+02 1.003690e+00 ## range 1.130000e+01 1.460000e+00 1.000000e+00 1.460000e+01 5.990000e-01 7.100000e+01 2.830000e+02 1.362000e-02 ## sum 1.330310e+04 8.439850e+02 4.332900e+02 4.059550e+03 1.398590e+02 2.538400e+04 7.430200e+04 1.593798e+03 ## median 7.900000e+00 5.200000e-01 2.600000e-01 2.200000e+00 7.900000e-02 1.400000e+01 3.800000e+01 9.967500e-01 ## mean 8.319637e+00 5.278205e-01 2.709756e-01 2.538806e+00 8.746654e-02 1.587492e+01 4.646779e+01 9.967467e-01 ## SE.mean 4.354102e-02 4.477892e-03 4.871551e-03 3.525922e-02 1.177000e-03 2.615857e-01 8.226402e-01 4.719810e-05 ## CI.mean.0.95 8.540351e-02 8.783160e-03 9.555302e-03 6.915919e-02 2.308627e-03 5.130871e-01 1.613567e+00 9.257670e-05 ## var 3.031416e+00 3.206238e-02 3.794748e-02 1.987897e+00 2.215143e-03 1.094149e+02 1.082102e+03 3.562029e-06 ## std.dev 1.741096e+00 1.790597e-01 1.948011e-01 1.409928e+00 4.706530e-02 1.046016e+01 3.289532e+01 1.887334e-03 ## coef.var 2.092755e-01 3.392435e-01 7.188881e-01 5.553510e-01 5.380949e-01 6.589108e-01 7.079167e-01 1.893494e-03 ## pH sulphates alcohol quality ## nbr.val 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 ## nbr.null 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 ## nbr.na 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 ## min 2.740000e+00 3.300000e-01 8.400000e+00 3.000000e+00 ## max 4.010000e+00 2.000000e+00 1.490000e+01 8.000000e+00 ## range 1.270000e+00 1.670000e+00 6.500000e+00 5.000000e+00 ## sum 5.294470e+03 1.052380e+03 1.666635e+04 9.012000e+03 ## median 3.310000e+00 6.200000e-01 1.020000e+01 6.000000e+00 ## mean 3.311113e+00 6.581488e-01 1.042298e+01 5.636023e+00 ## SE.mean 3.860868e-03 4.238999e-03 2.665002e-02 2.019555e-02 ## CI.mean.0.95 7.572899e-03 8.314584e-03 5.227267e-02 3.961255e-02 ## var 2.383518e-02 2.873262e-02 1.135647e+00 6.521684e-01 ## std.dev 1.543865e-01 1.695070e-01 1.065668e+00 8.075694e-01 ## coef.var 4.662676e-02 2.575511e-01 1.022421e-01 1.432871e-01 3.3 Univariate Exploration 3.4 Bivariate Exploration 3.5 Multivariate Exploration Correlations between the variables # ++++++++++++++++++++++++++++ # flattenCorrMatrix # ++++++++++++++++++++++++++++ # cormat : matrix of the correlation coefficients # pmat : matrix of the correlation p-values flattenCorrMatrix &lt;- function(cormat, pmat) { ut &lt;- upper.tri(cormat) data.frame( row = rownames(cormat)[row(cormat)[ut]], column = rownames(cormat)[col(cormat)[ut]], cor =(cormat)[ut], p = pmat[ut] ) } res2 &lt;- rcorr(as.matrix(df)) cor.m &lt;- flattenCorrMatrix(res2$r, res2$P) cor.m[order(cor.m[,3],decreasing=TRUE),] ## row column cor p ## 2 fixed.acidity citric.acid 0.671703435 0.000000e+00 ## 22 fixed.acidity density 0.668047292 0.000000e+00 ## 21 free.sulfur.dioxide total.sulfur.dioxide 0.667666450 0.000000e+00 ## 66 alcohol quality 0.476166324 0.000000e+00 ## 41 chlorides sulphates 0.371260481 0.000000e+00 ## 24 citric.acid density 0.364947175 0.000000e+00 ## 25 residual.sugar density 0.355283371 0.000000e+00 ## 39 citric.acid sulphates 0.312770044 0.000000e+00 ## 65 sulphates quality 0.251397079 0.000000e+00 ## 30 volatile.acidity pH 0.234937294 0.000000e+00 ## 58 citric.acid quality 0.226372514 0.000000e+00 ## 54 pH alcohol 0.205632509 0.000000e+00 ## 9 citric.acid chlorides 0.203822914 2.220446e-16 ## 19 residual.sugar total.sulfur.dioxide 0.203027882 2.220446e-16 ## 26 chlorides density 0.200632327 4.440892e-16 ## 14 residual.sugar free.sulfur.dioxide 0.187048995 4.685141e-14 ## 37 fixed.acidity sulphates 0.183005664 1.647571e-13 ## 44 density sulphates 0.148506412 2.418474e-09 ## 6 citric.acid residual.sugar 0.143577162 8.083723e-09 ## 56 fixed.acidity quality 0.124051649 6.495635e-07 ## 4 fixed.acidity residual.sugar 0.114776724 4.199465e-06 ## 48 citric.acid alcohol 0.109903247 1.059462e-05 ## 7 fixed.acidity chlorides 0.093705186 1.751746e-04 ## 55 sulphates alcohol 0.093594750 1.783053e-04 ## 17 volatile.acidity total.sulfur.dioxide 0.076470005 2.213857e-03 ## 28 total.sulfur.dioxide density 0.071269476 4.354284e-03 ## 34 free.sulfur.dioxide pH 0.070377499 4.869975e-03 ## 8 volatile.acidity chlorides 0.061297772 1.422491e-02 ## 10 residual.sugar chlorides 0.055609535 2.617079e-02 ## 42 free.sulfur.dioxide sulphates 0.051657572 3.888321e-02 ## 20 chlorides total.sulfur.dioxide 0.047400468 5.809120e-02 ## 43 total.sulfur.dioxide sulphates 0.042946836 8.601835e-02 ## 49 residual.sugar alcohol 0.042075437 9.258425e-02 ## 18 citric.acid total.sulfur.dioxide 0.035533024 1.555454e-01 ## 23 volatile.acidity density 0.022026232 3.787554e-01 ## 59 residual.sugar quality 0.013731637 5.832180e-01 ## 15 chlorides free.sulfur.dioxide 0.005562147 8.241238e-01 ## 40 residual.sugar sulphates 0.005527121 8.252134e-01 ## 5 volatile.acidity residual.sugar 0.001917882 9.389168e-01 ## 12 volatile.acidity free.sulfur.dioxide -0.010503827 6.747011e-01 ## 27 free.sulfur.dioxide density -0.021945831 3.804985e-01 ## 61 free.sulfur.dioxide quality -0.050656057 4.283398e-02 ## 64 pH quality -0.057731391 2.096278e-02 ## 13 citric.acid free.sulfur.dioxide -0.060978129 1.473916e-02 ## 46 fixed.acidity alcohol -0.061668271 1.364868e-02 ## 35 total.sulfur.dioxide pH -0.066494559 7.818341e-03 ## 51 free.sulfur.dioxide alcohol -0.069408354 5.492314e-03 ## 32 residual.sugar pH -0.085652422 6.065915e-04 ## 16 fixed.acidity total.sulfur.dioxide -0.113181443 5.709033e-06 ## 60 chlorides quality -0.128906560 2.313383e-07 ## 11 fixed.acidity free.sulfur.dioxide -0.153794193 6.335581e-10 ## 63 density quality -0.174919228 1.874945e-12 ## 62 total.sulfur.dioxide quality -0.185100289 8.615331e-14 ## 45 pH sulphates -0.196647602 2.220446e-15 ## 47 volatile.acidity alcohol -0.202288027 4.440892e-16 ## 52 total.sulfur.dioxide alcohol -0.205653944 0.000000e+00 ## 50 chlorides alcohol -0.221140545 0.000000e+00 ## 1 fixed.acidity volatile.acidity -0.256130895 0.000000e+00 ## 38 volatile.acidity sulphates -0.260986685 0.000000e+00 ## 33 chlorides pH -0.265026131 0.000000e+00 ## 36 density pH -0.341699335 0.000000e+00 ## 57 volatile.acidity quality -0.390557780 0.000000e+00 ## 53 density alcohol -0.496179770 0.000000e+00 ## 31 citric.acid pH -0.541904145 0.000000e+00 ## 3 volatile.acidity citric.acid -0.552495685 0.000000e+00 ## 29 fixed.acidity pH -0.682978195 0.000000e+00 3.5.1 Visualize Correlations # Insignificant correlations are leaved blank corrplot(res2$r, type=&quot;upper&quot;, order=&quot;hclust&quot;, p.mat = res2$P, sig.level = 0.01, insig = &quot;blank&quot;) #Visualization of a Correlation Matrix. On top the (absolute) value of the correlation plus the result of the cor.test as stars. On bottom, the bivariate scatterplots, with a fitted line chart.Correlation(df, histogram=TRUE, pch=19) ggplot(df, aes(x = fixed.acidity, y = pH, color = quality)) + geom_point(size = 3, alpha = .6) + labs(title = &quot;Wine Composition by fixed acidity, citric acid, and quality&quot;) ggplot(df, aes(x = fixed.acidity, y = density, color = quality)) + geom_point(size = 3, alpha = .6) + labs(title = &quot;Wine Composition by fixed acidity, density, and quality&quot;) "],["introduction-1.html", "Chapter 4 Introduction 4.1 The Research Question 4.2 Statistical or Analytical Method 4.3 Variables in the Data that will be used for Analysis", " Chapter 4 Introduction 4.1 The Research Question Our final project will explore the relationship between the outcome of two dependent variables of wine, value and quality, and their chemical composition: including measures such as acidity, residual sugar, and alcohol percentage. A predictive model for pricing and quality of wine can provide guidance to small wineries and vineyards, especially those from less established wine regions, so that they can more accurately price their inventory and ensure a better return on investment. What is the quality of wine based on its quantitative characteristics (Fixed Acidity, Volatile Acidity, Citric Acid, Residual Sugar, Chlorides, Free Sulfur Dioxide, Total Sulfur Dioxide, Density, pH, Sulphates, and Alcohol)? 4.2 Statistical or Analytical Method LASSO Regression, Random Forests, and K-Nearest 4.3 Variables in the Data that will be used for Analysis Our analysis will include the following x-variables, output, or outcome variables: Fixed Acidity, Volatile Acidity, Citric Acid, Residual Sugar, Chlorides, Free Sulfur Dioxide, Total Sulfur Dioxide, Density, pH, Sulphates, and Alcohol. The dependent, y-variables of our analysis will be: Quality, Price (Value). "],["descriptive-statistics-1.html", "Chapter 5 Descriptive Statistics 5.1 The Data 5.2 Data Exploration and Descr Statistics 5.3 Univariate Exploration 5.4 Bivariate Exploration 5.5 Multivariate Exploration 5.6 Load Data 5.7 Process Reference 5.8 Data Partitioning 5.9 Scaling the Numeric Features 5.10 Linear Regression 5.11 Regularization 5.12 Ridge Regression 5.13 Lasso Regression 5.14 Load Data", " Chapter 5 Descriptive Statistics 5.1 The Data We have taken a data-set from Kaggle: https://www.kaggle.com/uciml/red-wine-quality-cortez-et-al-2009 This data-set inlcudes the measurements from the wine along with its quality rating. df&lt;-read.table(&quot;data/winequality-red.csv&quot;,stringsAsFactors = FALSE, sep=&quot;,&quot;,header = TRUE) head(df) ## fixed.acidity volatile.acidity citric.acid residual.sugar chlorides free.sulfur.dioxide total.sulfur.dioxide density pH sulphates alcohol ## 1 7.4 0.70 0.00 1.9 0.076 11 34 0.9978 3.51 0.56 9.4 ## 2 7.8 0.88 0.00 2.6 0.098 25 67 0.9968 3.20 0.68 9.8 ## 3 7.8 0.76 0.04 2.3 0.092 15 54 0.9970 3.26 0.65 9.8 ## 4 11.2 0.28 0.56 1.9 0.075 17 60 0.9980 3.16 0.58 9.8 ## 5 7.4 0.70 0.00 1.9 0.076 11 34 0.9978 3.51 0.56 9.4 ## 6 7.4 0.66 0.00 1.8 0.075 13 40 0.9978 3.51 0.56 9.4 ## quality ## 1 5 ## 2 5 ## 3 5 ## 4 6 ## 5 5 ## 6 5 5.2 Data Exploration and Descr Statistics stat.desc(df) ## fixed.acidity volatile.acidity citric.acid residual.sugar chlorides free.sulfur.dioxide total.sulfur.dioxide density ## nbr.val 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 ## nbr.null 0.000000e+00 0.000000e+00 1.320000e+02 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 ## nbr.na 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 ## min 4.600000e+00 1.200000e-01 0.000000e+00 9.000000e-01 1.200000e-02 1.000000e+00 6.000000e+00 9.900700e-01 ## max 1.590000e+01 1.580000e+00 1.000000e+00 1.550000e+01 6.110000e-01 7.200000e+01 2.890000e+02 1.003690e+00 ## range 1.130000e+01 1.460000e+00 1.000000e+00 1.460000e+01 5.990000e-01 7.100000e+01 2.830000e+02 1.362000e-02 ## sum 1.330310e+04 8.439850e+02 4.332900e+02 4.059550e+03 1.398590e+02 2.538400e+04 7.430200e+04 1.593798e+03 ## median 7.900000e+00 5.200000e-01 2.600000e-01 2.200000e+00 7.900000e-02 1.400000e+01 3.800000e+01 9.967500e-01 ## mean 8.319637e+00 5.278205e-01 2.709756e-01 2.538806e+00 8.746654e-02 1.587492e+01 4.646779e+01 9.967467e-01 ## SE.mean 4.354102e-02 4.477892e-03 4.871551e-03 3.525922e-02 1.177000e-03 2.615857e-01 8.226402e-01 4.719810e-05 ## CI.mean.0.95 8.540351e-02 8.783160e-03 9.555302e-03 6.915919e-02 2.308627e-03 5.130871e-01 1.613567e+00 9.257670e-05 ## var 3.031416e+00 3.206238e-02 3.794748e-02 1.987897e+00 2.215143e-03 1.094149e+02 1.082102e+03 3.562029e-06 ## std.dev 1.741096e+00 1.790597e-01 1.948011e-01 1.409928e+00 4.706530e-02 1.046016e+01 3.289532e+01 1.887334e-03 ## coef.var 2.092755e-01 3.392435e-01 7.188881e-01 5.553510e-01 5.380949e-01 6.589108e-01 7.079167e-01 1.893494e-03 ## pH sulphates alcohol quality ## nbr.val 1.599000e+03 1.599000e+03 1.599000e+03 1.599000e+03 ## nbr.null 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 ## nbr.na 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 ## min 2.740000e+00 3.300000e-01 8.400000e+00 3.000000e+00 ## max 4.010000e+00 2.000000e+00 1.490000e+01 8.000000e+00 ## range 1.270000e+00 1.670000e+00 6.500000e+00 5.000000e+00 ## sum 5.294470e+03 1.052380e+03 1.666635e+04 9.012000e+03 ## median 3.310000e+00 6.200000e-01 1.020000e+01 6.000000e+00 ## mean 3.311113e+00 6.581488e-01 1.042298e+01 5.636023e+00 ## SE.mean 3.860868e-03 4.238999e-03 2.665002e-02 2.019555e-02 ## CI.mean.0.95 7.572899e-03 8.314584e-03 5.227267e-02 3.961255e-02 ## var 2.383518e-02 2.873262e-02 1.135647e+00 6.521684e-01 ## std.dev 1.543865e-01 1.695070e-01 1.065668e+00 8.075694e-01 ## coef.var 4.662676e-02 2.575511e-01 1.022421e-01 1.432871e-01 5.3 Univariate Exploration 5.4 Bivariate Exploration 5.5 Multivariate Exploration Correlations between the variables # ++++++++++++++++++++++++++++ # flattenCorrMatrix # ++++++++++++++++++++++++++++ # cormat : matrix of the correlation coefficients # pmat : matrix of the correlation p-values flattenCorrMatrix &lt;- function(cormat, pmat) { ut &lt;- upper.tri(cormat) data.frame( row = rownames(cormat)[row(cormat)[ut]], column = rownames(cormat)[col(cormat)[ut]], cor =(cormat)[ut], p = pmat[ut] ) } res2 &lt;- rcorr(as.matrix(df)) cor.m &lt;- flattenCorrMatrix(res2$r, res2$P) cor.m[order(cor.m[,3],decreasing=TRUE),] ## row column cor p ## 2 fixed.acidity citric.acid 0.671703435 0.000000e+00 ## 22 fixed.acidity density 0.668047292 0.000000e+00 ## 21 free.sulfur.dioxide total.sulfur.dioxide 0.667666450 0.000000e+00 ## 66 alcohol quality 0.476166324 0.000000e+00 ## 41 chlorides sulphates 0.371260481 0.000000e+00 ## 24 citric.acid density 0.364947175 0.000000e+00 ## 25 residual.sugar density 0.355283371 0.000000e+00 ## 39 citric.acid sulphates 0.312770044 0.000000e+00 ## 65 sulphates quality 0.251397079 0.000000e+00 ## 30 volatile.acidity pH 0.234937294 0.000000e+00 ## 58 citric.acid quality 0.226372514 0.000000e+00 ## 54 pH alcohol 0.205632509 0.000000e+00 ## 9 citric.acid chlorides 0.203822914 2.220446e-16 ## 19 residual.sugar total.sulfur.dioxide 0.203027882 2.220446e-16 ## 26 chlorides density 0.200632327 4.440892e-16 ## 14 residual.sugar free.sulfur.dioxide 0.187048995 4.685141e-14 ## 37 fixed.acidity sulphates 0.183005664 1.647571e-13 ## 44 density sulphates 0.148506412 2.418474e-09 ## 6 citric.acid residual.sugar 0.143577162 8.083723e-09 ## 56 fixed.acidity quality 0.124051649 6.495635e-07 ## 4 fixed.acidity residual.sugar 0.114776724 4.199465e-06 ## 48 citric.acid alcohol 0.109903247 1.059462e-05 ## 7 fixed.acidity chlorides 0.093705186 1.751746e-04 ## 55 sulphates alcohol 0.093594750 1.783053e-04 ## 17 volatile.acidity total.sulfur.dioxide 0.076470005 2.213857e-03 ## 28 total.sulfur.dioxide density 0.071269476 4.354284e-03 ## 34 free.sulfur.dioxide pH 0.070377499 4.869975e-03 ## 8 volatile.acidity chlorides 0.061297772 1.422491e-02 ## 10 residual.sugar chlorides 0.055609535 2.617079e-02 ## 42 free.sulfur.dioxide sulphates 0.051657572 3.888321e-02 ## 20 chlorides total.sulfur.dioxide 0.047400468 5.809120e-02 ## 43 total.sulfur.dioxide sulphates 0.042946836 8.601835e-02 ## 49 residual.sugar alcohol 0.042075437 9.258425e-02 ## 18 citric.acid total.sulfur.dioxide 0.035533024 1.555454e-01 ## 23 volatile.acidity density 0.022026232 3.787554e-01 ## 59 residual.sugar quality 0.013731637 5.832180e-01 ## 15 chlorides free.sulfur.dioxide 0.005562147 8.241238e-01 ## 40 residual.sugar sulphates 0.005527121 8.252134e-01 ## 5 volatile.acidity residual.sugar 0.001917882 9.389168e-01 ## 12 volatile.acidity free.sulfur.dioxide -0.010503827 6.747011e-01 ## 27 free.sulfur.dioxide density -0.021945831 3.804985e-01 ## 61 free.sulfur.dioxide quality -0.050656057 4.283398e-02 ## 64 pH quality -0.057731391 2.096278e-02 ## 13 citric.acid free.sulfur.dioxide -0.060978129 1.473916e-02 ## 46 fixed.acidity alcohol -0.061668271 1.364868e-02 ## 35 total.sulfur.dioxide pH -0.066494559 7.818341e-03 ## 51 free.sulfur.dioxide alcohol -0.069408354 5.492314e-03 ## 32 residual.sugar pH -0.085652422 6.065915e-04 ## 16 fixed.acidity total.sulfur.dioxide -0.113181443 5.709033e-06 ## 60 chlorides quality -0.128906560 2.313383e-07 ## 11 fixed.acidity free.sulfur.dioxide -0.153794193 6.335581e-10 ## 63 density quality -0.174919228 1.874945e-12 ## 62 total.sulfur.dioxide quality -0.185100289 8.615331e-14 ## 45 pH sulphates -0.196647602 2.220446e-15 ## 47 volatile.acidity alcohol -0.202288027 4.440892e-16 ## 52 total.sulfur.dioxide alcohol -0.205653944 0.000000e+00 ## 50 chlorides alcohol -0.221140545 0.000000e+00 ## 1 fixed.acidity volatile.acidity -0.256130895 0.000000e+00 ## 38 volatile.acidity sulphates -0.260986685 0.000000e+00 ## 33 chlorides pH -0.265026131 0.000000e+00 ## 36 density pH -0.341699335 0.000000e+00 ## 57 volatile.acidity quality -0.390557780 0.000000e+00 ## 53 density alcohol -0.496179770 0.000000e+00 ## 31 citric.acid pH -0.541904145 0.000000e+00 ## 3 volatile.acidity citric.acid -0.552495685 0.000000e+00 ## 29 fixed.acidity pH -0.682978195 0.000000e+00 5.5.1 Visualize Correlations # Insignificant correlations are leaved blank corrplot(res2$r, type=&quot;upper&quot;, order=&quot;hclust&quot;, p.mat = res2$P, sig.level = 0.01, insig = &quot;blank&quot;) #Visualization of a Correlation Matrix. On top the (absolute) value of the correlation plus the result of the cor.test as stars. On bottom, the bivariate scatterplots, with a fitted line chart.Correlation(df, histogram=TRUE, pch=19) ggplot(df, aes(x = fixed.acidity, y = pH, color = quality)) + geom_point(size = 3, alpha = .6) + labs(title = &quot;Wine Composition by fixed acidity, citric acid, and quality&quot;) ggplot(df, aes(x = fixed.acidity, y = density, color = quality)) + geom_point(size = 3, alpha = .6) + labs(title = &quot;Wine Composition by fixed acidity, density, and quality&quot;) 5.6 Load Data We have taken a data-set from Kaggle: https://www.kaggle.com/uciml/red-wine-quality-cortez-et-al-2009 This data-set inlcudes the measurements from the wine along with its quality rating. wine&lt;-read.table(&quot;data/winequality-red.csv&quot;,stringsAsFactors = FALSE, sep=&quot;,&quot;,header = TRUE) glimpse(wine) ## Rows: 1,599 ## Columns: 12 ## $ fixed.acidity &lt;dbl&gt; 7.4, 7.8, 7.8, 11.2, 7.4, 7.4, 7.9, 7.3, 7.8, 7.5, 6.7, 7.5, 5.6, 7.8, 8.9, 8.9, 8.5, 8.1, 7.4, 7.9, 8.9, 7.6, 7.9, ~ ## $ volatile.acidity &lt;dbl&gt; 0.700, 0.880, 0.760, 0.280, 0.700, 0.660, 0.600, 0.650, 0.580, 0.500, 0.580, 0.500, 0.615, 0.610, 0.620, 0.620, 0.28~ ## $ citric.acid &lt;dbl&gt; 0.00, 0.00, 0.04, 0.56, 0.00, 0.00, 0.06, 0.00, 0.02, 0.36, 0.08, 0.36, 0.00, 0.29, 0.18, 0.19, 0.56, 0.28, 0.08, 0.~ ## $ residual.sugar &lt;dbl&gt; 1.9, 2.6, 2.3, 1.9, 1.9, 1.8, 1.6, 1.2, 2.0, 6.1, 1.8, 6.1, 1.6, 1.6, 3.8, 3.9, 1.8, 1.7, 4.4, 1.8, 1.8, 2.3, 1.6, 2~ ## $ chlorides &lt;dbl&gt; 0.076, 0.098, 0.092, 0.075, 0.076, 0.075, 0.069, 0.065, 0.073, 0.071, 0.097, 0.071, 0.089, 0.114, 0.176, 0.170, 0.09~ ## $ free.sulfur.dioxide &lt;dbl&gt; 11, 25, 15, 17, 11, 13, 15, 15, 9, 17, 15, 17, 16, 9, 52, 51, 35, 16, 6, 17, 29, 23, 10, 9, 21, 11, 4, 10, 14, 8, 17~ ## $ total.sulfur.dioxide &lt;dbl&gt; 34, 67, 54, 60, 34, 40, 59, 21, 18, 102, 65, 102, 59, 29, 145, 148, 103, 56, 29, 56, 60, 71, 37, 67, 40, 23, 11, 37,~ ## $ density &lt;dbl&gt; 0.9978, 0.9968, 0.9970, 0.9980, 0.9978, 0.9978, 0.9964, 0.9946, 0.9968, 0.9978, 0.9959, 0.9978, 0.9943, 0.9974, 0.99~ ## $ pH &lt;dbl&gt; 3.51, 3.20, 3.26, 3.16, 3.51, 3.51, 3.30, 3.39, 3.36, 3.35, 3.28, 3.35, 3.58, 3.26, 3.16, 3.17, 3.30, 3.11, 3.38, 3.~ ## $ sulphates &lt;dbl&gt; 0.56, 0.68, 0.65, 0.58, 0.56, 0.56, 0.46, 0.47, 0.57, 0.80, 0.54, 0.80, 0.52, 1.56, 0.88, 0.93, 0.75, 1.28, 0.50, 1.~ ## $ alcohol &lt;dbl&gt; 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 10.5, 9.2, 10.5, 9.9, 9.1, 9.2, 9.2, 10.5, 9.3, 9.0, 9.2, 9.4, 9.7, 9.~ ## $ quality &lt;int&gt; 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 4, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 6, 7, 4,~ 5.7 Process Reference The process was followed from this site: https://www.pluralsight.com/guides/linear-lasso-and-ridge-regression-with-r 5.8 Data Partitioning The below code takes 70% of the data for training and 30% of the code for testing. set.seed(100) index = sample(1:nrow(wine), 0.7*nrow(wine)) train = wine[index,] # Create the training data test = wine[-index,] # Create the test data dim(train) ## [1] 1119 12 dim(test) ## [1] 480 12 5.9 Scaling the Numeric Features cols &lt;- colnames(wine) pre_proc_val &lt;- preProcess(train[,cols], method = c(&quot;center&quot;, &quot;scale&quot;)) train[,cols] = predict(pre_proc_val, train[,cols]) test[,cols] = predict(pre_proc_val, test[,cols]) summary(train) ## fixed.acidity volatile.acidity citric.acid residual.sugar chlorides free.sulfur.dioxide total.sulfur.dioxide ## Min. :-2.0802 Min. :-2.26583 Min. :-1.37809 Min. :-1.18596 Min. :-1.58727 Min. :-1.4109 Min. :-1.2446 ## 1st Qu.:-0.6928 1st Qu.:-0.76458 1st Qu.:-0.92192 1st Qu.:-0.45565 1st Qu.:-0.36546 1st Qu.:-0.8446 1st Qu.:-0.7471 ## Median :-0.2304 Median :-0.04176 Median :-0.06029 Median :-0.23655 Median :-0.15480 Median :-0.1840 Median :-0.2496 ## Mean : 0.0000 Mean : 0.00000 Mean : 0.00000 Mean : 0.00000 Mean : 0.00000 Mean : 0.0000 Mean : 0.0000 ## 3rd Qu.: 0.5790 3rd Qu.: 0.62546 3rd Qu.: 0.80135 3rd Qu.: 0.05557 3rd Qu.: 0.05586 3rd Qu.: 0.5710 3rd Qu.: 0.4656 ## Max. : 4.1630 Max. : 5.85201 Max. : 3.69037 Max. : 9.47663 Max. :11.03109 Max. : 5.2899 Max. : 7.5552 ## density pH sulphates alcohol quality ## Min. :-3.57012 Min. :-3.68218 Min. :-1.8820 Min. :-1.9054 Min. :-3.3046 ## 1st Qu.:-0.61381 1st Qu.:-0.66652 1st Qu.:-0.6199 1st Qu.:-0.8694 1st Qu.:-0.7831 ## Median :-0.01507 Median :-0.02489 Median :-0.2183 Median :-0.2101 Median : 0.4777 ## Mean : 0.00000 Mean : 0.00000 Mean : 0.0000 Mean : 0.0000 Mean : 0.0000 ## 3rd Qu.: 0.57566 3rd Qu.: 0.55258 3rd Qu.: 0.4127 3rd Qu.: 0.5747 3rd Qu.: 0.4777 ## Max. : 3.71106 Max. : 4.46653 Max. : 7.6982 Max. : 3.3687 Max. : 2.9993 5.10 Linear Regression 5.10.1 What is it? The simplest form of regression is linear regression, which assumes that the predictors have a linear relationship with the target variable. ### Assumptions * Input is assumed to have a Normal distribution and are not correlated with each other. We saw in the Descriptive Stats section that this was not the case With these assumptions being true we can model quality witht the following equation. \\[ q = a_1x_1 + a_2x_2 + a_3x_3 + \\dots + a_2nx_n + b\\] Where \\(a_1, a_2, \\dots, a_n\\) are coefficients from the model. \\(x_1, x_2, \\dots, x_n\\) are the input variables to the model. \\(b\\) is a factor of the model and \\(q\\) is equal to the quality output. 5.10.2 Single Variable In the code-block below we output the summary of just the measurement alchol into the linear model. summary(lm(quality~alcohol, data = train)) ## ## Call: ## lm(formula = quality ~ alcohol, data = train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.5773 -0.4885 -0.2049 0.6305 3.2938 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.845e-16 2.587e-02 0.0 1 ## alcohol 5.019e-01 2.588e-02 19.4 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.8653 on 1117 degrees of freedom ## Multiple R-squared: 0.252, Adjusted R-squared: 0.2513 ## F-statistic: 376.2 on 1 and 1117 DF, p-value: &lt; 2.2e-16 Focusing on the p-value above we can tell that it is unlikely that by chance we will observe a relationship between alcohol and quality. 5.10.3 Multiple Variables In the code block below we will input all of the variables and examine the output. lr &lt;- lm(quality~fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + density + pH + sulphates + alcohol, data = train) summary(lr) ## ## Call: ## lm(formula = quality ~ fixed.acidity + volatile.acidity + citric.acid + ## residual.sugar + chlorides + free.sulfur.dioxide + density + ## pH + sulphates + alcohol, data = train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.2099 -0.4497 -0.0791 0.5241 2.5651 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.898e-15 2.383e-02 0.000 1.00000 ## fixed.acidity 1.248e-01 6.537e-02 1.910 0.05645 . ## volatile.acidity -2.657e-01 3.093e-02 -8.589 &lt; 2e-16 *** ## citric.acid -9.537e-02 4.006e-02 -2.381 0.01744 * ## residual.sugar 5.473e-02 3.099e-02 1.766 0.07761 . ## chlorides -9.002e-02 2.936e-02 -3.066 0.00222 ** ## free.sulfur.dioxide -4.450e-02 2.517e-02 -1.768 0.07737 . ## density -9.071e-02 5.979e-02 -1.517 0.12948 ## pH -4.245e-02 4.281e-02 -0.992 0.32162 ## sulphates 1.813e-01 2.888e-02 6.279 4.87e-10 *** ## alcohol 3.934e-01 4.120e-02 9.548 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.7972 on 1108 degrees of freedom ## Multiple R-squared: 0.3701, Adjusted R-squared: 0.3644 ## F-statistic: 65.1 on 10 and 1108 DF, p-value: &lt; 2.2e-16 Reviewing the output we find that the inputs: volatile.acidity, sulphates, and alcohol. 5.11 Regularization Linear regression algorithm works by selecting coefficients for each independent variable that minimizes a loss function. However, if the coefficients are large, they can lead to over-fitting on the training dataset, and such a model will not generalize well on the unseen test data. To overcome this shortcoming, well do regularization, which penalizes large coefficients. The following sections of the guide will discuss various regularization algorithms. We will be using the glmnet() package to build the regularized regression models. The glmnet function does not work with dataframes, so we need to create a numeric matrix for the training features and a vector of target values. The lines of code below perform the task of creating model matrix using the dummyVars function from the caret package. The predict function is then applied to create numeric model matrices for training and test. dummies &lt;- dummyVars(quality~., data = wine) train_dummies = predict(dummies, newdata = train) test_dummies = predict(dummies, newdata = test) print(dim(train_dummies)); print(dim(test_dummies)) ## [1] 1119 11 ## [1] 480 11 5.12 Ridge Regression Ridge regression is an extension of linear regression where the loss function is modified to minimize the complexity of the model. This modification is done by adding a penalty parameter that is equivalent to the square of the magnitude of the coefficients. eval_results &lt;- function(true, predicted, df) { SSE &lt;- sum((predicted - true)^2) SST &lt;- sum((true - mean(true))^2) R_square &lt;- 1 - SSE / SST RMSE = sqrt(SSE/nrow(df)) # Model performance metrics data.frame( RMSE = RMSE, Rsquare = R_square ) } x = as.matrix(train_dummies) y_train = train$quality x_test = as.matrix(test_dummies) y_test = test$unemploy lambdas &lt;- 10^seq(2, -3, by = -.1) ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0, family = &#39;gaussian&#39;, lambda = lambdas) summary(ridge_reg) ## Length Class Mode ## a0 51 -none- numeric ## beta 561 dgCMatrix S4 ## df 51 -none- numeric ## dim 2 -none- numeric ## lambda 51 -none- numeric ## dev.ratio 51 -none- numeric ## nulldev 1 -none- numeric ## npasses 1 -none- numeric ## jerr 1 -none- numeric ## offset 1 -none- logical ## call 7 -none- call ## nobs 1 -none- numeric cv_ridge &lt;- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas) optimal_lambda &lt;- cv_ridge$lambda.min optimal_lambda ## [1] 0.05011872 5.13 Lasso Regression lambdas &lt;- 10^seq(2, -3, by = -.1) # Setting alpha = 1 implements lasso regression lasso_reg &lt;- cv.glmnet(x, y_train, alpha = 1, lambda = lambdas, standardize = TRUE, nfolds = 5) # Best lambda_best &lt;- lasso_reg$lambda.min lambda_best ## [1] 0.001995262 lasso_model &lt;- glmnet(x, y_train, alpha = 1, lambda = lambda_best, standardize = TRUE) predictions_train &lt;- predict(lasso_model, s = lambda_best, newx = x) eval_results(y_train, predictions_train, train) ## RMSE Rsquare ## 1 0.7898025 0.3756541 predictions_test &lt;- predict(lasso_model, s = lambda_best, newx = x_test) eval_results(y_test, predictions_test, test) ## Warning in mean.default(true): argument is not numeric or logical: returning NA ## RMSE Rsquare ## 1 0 NaN 5.13.1 Features of the glmnet Package \\(\\lambda\\) is defined once and \\(\\alpha\\) where lasso is scaled by \\(\\alpha\\) and ridge penalty is scaled by \\((1-\\alpha\\)). 5.13.2 Elastic Net Regression Elastic net regression combines the properties of ridge and lasso regression # Set training control train_cont &lt;- trainControl(method = &quot;repeatedcv&quot;, number = 10, repeats = 5, search = &quot;random&quot;, verboseIter = TRUE) # Train the model elastic_reg &lt;- train(quality ~ ., data = train, method = &quot;glmnet&quot;, preProcess = c(&quot;center&quot;, &quot;scale&quot;), tuneLength = 10, trControl = train_cont) ## + Fold01.Rep1: alpha=0.4004, lambda=0.002439 ## - Fold01.Rep1: alpha=0.4004, lambda=0.002439 ## + Fold01.Rep1: alpha=0.1857, lambda=1.109010 ## - Fold01.Rep1: alpha=0.1857, lambda=1.109010 ## + Fold01.Rep1: alpha=0.9054, lambda=0.120703 ## - Fold01.Rep1: alpha=0.9054, lambda=0.120703 ## + Fold01.Rep1: alpha=0.5759, lambda=1.247636 ## - Fold01.Rep1: alpha=0.5759, lambda=1.247636 ## + Fold01.Rep1: alpha=0.2560, lambda=0.003753 ## - Fold01.Rep1: alpha=0.2560, lambda=0.003753 ## + Fold01.Rep1: alpha=0.7879, lambda=0.195914 ## - Fold01.Rep1: alpha=0.7879, lambda=0.195914 ## + Fold01.Rep1: alpha=0.4018, lambda=0.086926 ## - Fold01.Rep1: alpha=0.4018, lambda=0.086926 ## + Fold01.Rep1: alpha=0.1517, lambda=1.159105 ## - Fold01.Rep1: alpha=0.1517, lambda=1.159105 ## + Fold01.Rep1: alpha=0.3660, lambda=0.692297 ## - Fold01.Rep1: alpha=0.3660, lambda=0.692297 ## + Fold01.Rep1: alpha=0.2080, lambda=0.003654 ## - Fold01.Rep1: alpha=0.2080, lambda=0.003654 ## + Fold02.Rep1: alpha=0.4004, lambda=0.002439 ## - Fold02.Rep1: alpha=0.4004, lambda=0.002439 ## + Fold02.Rep1: alpha=0.1857, lambda=1.109010 ## - Fold02.Rep1: alpha=0.1857, lambda=1.109010 ## + Fold02.Rep1: alpha=0.9054, lambda=0.120703 ## - Fold02.Rep1: alpha=0.9054, lambda=0.120703 ## + Fold02.Rep1: alpha=0.5759, lambda=1.247636 ## - Fold02.Rep1: alpha=0.5759, lambda=1.247636 ## + Fold02.Rep1: alpha=0.2560, lambda=0.003753 ## - Fold02.Rep1: alpha=0.2560, lambda=0.003753 ## + Fold02.Rep1: alpha=0.7879, lambda=0.195914 ## - Fold02.Rep1: alpha=0.7879, lambda=0.195914 ## + Fold02.Rep1: alpha=0.4018, lambda=0.086926 ## - Fold02.Rep1: alpha=0.4018, lambda=0.086926 ## + Fold02.Rep1: alpha=0.1517, lambda=1.159105 ## - Fold02.Rep1: alpha=0.1517, lambda=1.159105 ## + Fold02.Rep1: alpha=0.3660, lambda=0.692297 ## - Fold02.Rep1: alpha=0.3660, lambda=0.692297 ## + Fold02.Rep1: alpha=0.2080, lambda=0.003654 ## - Fold02.Rep1: alpha=0.2080, lambda=0.003654 ## + Fold03.Rep1: alpha=0.4004, lambda=0.002439 ## - Fold03.Rep1: alpha=0.4004, lambda=0.002439 ## + Fold03.Rep1: alpha=0.1857, lambda=1.109010 ## - Fold03.Rep1: alpha=0.1857, lambda=1.109010 ## + Fold03.Rep1: alpha=0.9054, lambda=0.120703 ## - Fold03.Rep1: alpha=0.9054, lambda=0.120703 ## + Fold03.Rep1: alpha=0.5759, lambda=1.247636 ## - Fold03.Rep1: alpha=0.5759, lambda=1.247636 ## + Fold03.Rep1: alpha=0.2560, lambda=0.003753 ## - Fold03.Rep1: alpha=0.2560, lambda=0.003753 ## + Fold03.Rep1: alpha=0.7879, lambda=0.195914 ## - Fold03.Rep1: alpha=0.7879, lambda=0.195914 ## + Fold03.Rep1: alpha=0.4018, lambda=0.086926 ## - Fold03.Rep1: alpha=0.4018, lambda=0.086926 ## + Fold03.Rep1: alpha=0.1517, lambda=1.159105 ## - Fold03.Rep1: alpha=0.1517, lambda=1.159105 ## + Fold03.Rep1: alpha=0.3660, lambda=0.692297 ## - Fold03.Rep1: alpha=0.3660, lambda=0.692297 ## + Fold03.Rep1: alpha=0.2080, lambda=0.003654 ## - Fold03.Rep1: alpha=0.2080, lambda=0.003654 ## + Fold04.Rep1: alpha=0.4004, lambda=0.002439 ## - Fold04.Rep1: alpha=0.4004, lambda=0.002439 ## + Fold04.Rep1: alpha=0.1857, lambda=1.109010 ## - Fold04.Rep1: alpha=0.1857, lambda=1.109010 ## + Fold04.Rep1: alpha=0.9054, lambda=0.120703 ## - Fold04.Rep1: alpha=0.9054, lambda=0.120703 ## + Fold04.Rep1: alpha=0.5759, lambda=1.247636 ## - Fold04.Rep1: alpha=0.5759, lambda=1.247636 ## + Fold04.Rep1: alpha=0.2560, lambda=0.003753 ## - Fold04.Rep1: alpha=0.2560, lambda=0.003753 ## + Fold04.Rep1: alpha=0.7879, lambda=0.195914 ## - Fold04.Rep1: alpha=0.7879, lambda=0.195914 ## + Fold04.Rep1: alpha=0.4018, lambda=0.086926 ## - Fold04.Rep1: alpha=0.4018, lambda=0.086926 ## + Fold04.Rep1: alpha=0.1517, lambda=1.159105 ## - Fold04.Rep1: alpha=0.1517, lambda=1.159105 ## + Fold04.Rep1: alpha=0.3660, lambda=0.692297 ## - Fold04.Rep1: alpha=0.3660, lambda=0.692297 ## + Fold04.Rep1: alpha=0.2080, lambda=0.003654 ## - Fold04.Rep1: alpha=0.2080, lambda=0.003654 ## + Fold05.Rep1: alpha=0.4004, lambda=0.002439 ## - Fold05.Rep1: alpha=0.4004, lambda=0.002439 ## + Fold05.Rep1: alpha=0.1857, lambda=1.109010 ## - Fold05.Rep1: alpha=0.1857, lambda=1.109010 ## + Fold05.Rep1: alpha=0.9054, lambda=0.120703 ## - Fold05.Rep1: alpha=0.9054, lambda=0.120703 ## + Fold05.Rep1: alpha=0.5759, lambda=1.247636 ## - Fold05.Rep1: alpha=0.5759, lambda=1.247636 ## + Fold05.Rep1: alpha=0.2560, lambda=0.003753 ## - Fold05.Rep1: alpha=0.2560, lambda=0.003753 ## + Fold05.Rep1: alpha=0.7879, lambda=0.195914 ## - Fold05.Rep1: alpha=0.7879, lambda=0.195914 ## + Fold05.Rep1: alpha=0.4018, lambda=0.086926 ## - Fold05.Rep1: alpha=0.4018, lambda=0.086926 ## + Fold05.Rep1: alpha=0.1517, lambda=1.159105 ## - Fold05.Rep1: alpha=0.1517, lambda=1.159105 ## + Fold05.Rep1: alpha=0.3660, lambda=0.692297 ## - Fold05.Rep1: alpha=0.3660, lambda=0.692297 ## + Fold05.Rep1: alpha=0.2080, lambda=0.003654 ## - Fold05.Rep1: alpha=0.2080, lambda=0.003654 ## + Fold06.Rep1: alpha=0.4004, lambda=0.002439 ## - Fold06.Rep1: alpha=0.4004, lambda=0.002439 ## + Fold06.Rep1: alpha=0.1857, lambda=1.109010 ## - Fold06.Rep1: alpha=0.1857, lambda=1.109010 ## + Fold06.Rep1: alpha=0.9054, lambda=0.120703 ## - Fold06.Rep1: alpha=0.9054, lambda=0.120703 ## + Fold06.Rep1: alpha=0.5759, lambda=1.247636 ## - Fold06.Rep1: alpha=0.5759, lambda=1.247636 ## + Fold06.Rep1: alpha=0.2560, lambda=0.003753 ## - Fold06.Rep1: alpha=0.2560, lambda=0.003753 ## + Fold06.Rep1: alpha=0.7879, lambda=0.195914 ## - Fold06.Rep1: alpha=0.7879, lambda=0.195914 ## + Fold06.Rep1: alpha=0.4018, lambda=0.086926 ## - Fold06.Rep1: alpha=0.4018, lambda=0.086926 ## + Fold06.Rep1: alpha=0.1517, lambda=1.159105 ## - Fold06.Rep1: alpha=0.1517, lambda=1.159105 ## + Fold06.Rep1: alpha=0.3660, lambda=0.692297 ## - Fold06.Rep1: alpha=0.3660, lambda=0.692297 ## + Fold06.Rep1: alpha=0.2080, lambda=0.003654 ## - Fold06.Rep1: alpha=0.2080, lambda=0.003654 ## + Fold07.Rep1: alpha=0.4004, lambda=0.002439 ## - Fold07.Rep1: alpha=0.4004, lambda=0.002439 ## + Fold07.Rep1: alpha=0.1857, lambda=1.109010 ## - Fold07.Rep1: alpha=0.1857, lambda=1.109010 ## + Fold07.Rep1: alpha=0.9054, lambda=0.120703 ## - Fold07.Rep1: alpha=0.9054, lambda=0.120703 ## + Fold07.Rep1: alpha=0.5759, lambda=1.247636 ## - Fold07.Rep1: alpha=0.5759, lambda=1.247636 ## + Fold07.Rep1: alpha=0.2560, lambda=0.003753 ## - Fold07.Rep1: alpha=0.2560, lambda=0.003753 ## + Fold07.Rep1: alpha=0.7879, lambda=0.195914 ## - Fold07.Rep1: alpha=0.7879, lambda=0.195914 ## + Fold07.Rep1: alpha=0.4018, lambda=0.086926 ## - Fold07.Rep1: alpha=0.4018, lambda=0.086926 ## + Fold07.Rep1: alpha=0.1517, lambda=1.159105 ## - Fold07.Rep1: alpha=0.1517, lambda=1.159105 ## + Fold07.Rep1: alpha=0.3660, lambda=0.692297 ## - Fold07.Rep1: alpha=0.3660, lambda=0.692297 ## + Fold07.Rep1: alpha=0.2080, lambda=0.003654 ## - Fold07.Rep1: alpha=0.2080, lambda=0.003654 ## + Fold08.Rep1: alpha=0.4004, lambda=0.002439 ## - Fold08.Rep1: alpha=0.4004, lambda=0.002439 ## + Fold08.Rep1: alpha=0.1857, lambda=1.109010 ## - Fold08.Rep1: alpha=0.1857, lambda=1.109010 ## + Fold08.Rep1: alpha=0.9054, lambda=0.120703 ## - Fold08.Rep1: alpha=0.9054, lambda=0.120703 ## + Fold08.Rep1: alpha=0.5759, lambda=1.247636 ## - Fold08.Rep1: alpha=0.5759, lambda=1.247636 ## + Fold08.Rep1: alpha=0.2560, lambda=0.003753 ## - Fold08.Rep1: alpha=0.2560, lambda=0.003753 ## + Fold08.Rep1: alpha=0.7879, lambda=0.195914 ## - Fold08.Rep1: alpha=0.7879, lambda=0.195914 ## + Fold08.Rep1: alpha=0.4018, lambda=0.086926 ## - Fold08.Rep1: alpha=0.4018, lambda=0.086926 ## + Fold08.Rep1: alpha=0.1517, lambda=1.159105 ## - Fold08.Rep1: alpha=0.1517, lambda=1.159105 ## + Fold08.Rep1: alpha=0.3660, lambda=0.692297 ## - Fold08.Rep1: alpha=0.3660, lambda=0.692297 ## + Fold08.Rep1: alpha=0.2080, lambda=0.003654 ## - Fold08.Rep1: alpha=0.2080, lambda=0.003654 ## + Fold09.Rep1: alpha=0.4004, lambda=0.002439 ## - Fold09.Rep1: alpha=0.4004, lambda=0.002439 ## + Fold09.Rep1: alpha=0.1857, lambda=1.109010 ## - Fold09.Rep1: alpha=0.1857, lambda=1.109010 ## + Fold09.Rep1: alpha=0.9054, lambda=0.120703 ## - Fold09.Rep1: alpha=0.9054, lambda=0.120703 ## + Fold09.Rep1: alpha=0.5759, lambda=1.247636 ## - Fold09.Rep1: alpha=0.5759, lambda=1.247636 ## + Fold09.Rep1: alpha=0.2560, lambda=0.003753 ## - Fold09.Rep1: alpha=0.2560, lambda=0.003753 ## + Fold09.Rep1: alpha=0.7879, lambda=0.195914 ## - Fold09.Rep1: alpha=0.7879, lambda=0.195914 ## + Fold09.Rep1: alpha=0.4018, lambda=0.086926 ## - Fold09.Rep1: alpha=0.4018, lambda=0.086926 ## + Fold09.Rep1: alpha=0.1517, lambda=1.159105 ## - Fold09.Rep1: alpha=0.1517, lambda=1.159105 ## + Fold09.Rep1: alpha=0.3660, lambda=0.692297 ## - Fold09.Rep1: alpha=0.3660, lambda=0.692297 ## + Fold09.Rep1: alpha=0.2080, lambda=0.003654 ## - Fold09.Rep1: alpha=0.2080, lambda=0.003654 ## + Fold10.Rep1: alpha=0.4004, lambda=0.002439 ## - Fold10.Rep1: alpha=0.4004, lambda=0.002439 ## + Fold10.Rep1: alpha=0.1857, lambda=1.109010 ## - Fold10.Rep1: alpha=0.1857, lambda=1.109010 ## + Fold10.Rep1: alpha=0.9054, lambda=0.120703 ## - Fold10.Rep1: alpha=0.9054, lambda=0.120703 ## + Fold10.Rep1: alpha=0.5759, lambda=1.247636 ## - Fold10.Rep1: alpha=0.5759, lambda=1.247636 ## + Fold10.Rep1: alpha=0.2560, lambda=0.003753 ## - Fold10.Rep1: alpha=0.2560, lambda=0.003753 ## + Fold10.Rep1: alpha=0.7879, lambda=0.195914 ## - Fold10.Rep1: alpha=0.7879, lambda=0.195914 ## + Fold10.Rep1: alpha=0.4018, lambda=0.086926 ## - Fold10.Rep1: alpha=0.4018, lambda=0.086926 ## + Fold10.Rep1: alpha=0.1517, lambda=1.159105 ## - Fold10.Rep1: alpha=0.1517, lambda=1.159105 ## + Fold10.Rep1: alpha=0.3660, lambda=0.692297 ## - Fold10.Rep1: alpha=0.3660, lambda=0.692297 ## + Fold10.Rep1: alpha=0.2080, lambda=0.003654 ## - Fold10.Rep1: alpha=0.2080, lambda=0.003654 ## + Fold01.Rep2: alpha=0.4004, lambda=0.002439 ## - Fold01.Rep2: alpha=0.4004, lambda=0.002439 ## + Fold01.Rep2: alpha=0.1857, lambda=1.109010 ## - Fold01.Rep2: alpha=0.1857, lambda=1.109010 ## + Fold01.Rep2: alpha=0.9054, lambda=0.120703 ## - Fold01.Rep2: alpha=0.9054, lambda=0.120703 ## + Fold01.Rep2: alpha=0.5759, lambda=1.247636 ## - Fold01.Rep2: alpha=0.5759, lambda=1.247636 ## + Fold01.Rep2: alpha=0.2560, lambda=0.003753 ## - Fold01.Rep2: alpha=0.2560, lambda=0.003753 ## + Fold01.Rep2: alpha=0.7879, lambda=0.195914 ## - Fold01.Rep2: alpha=0.7879, lambda=0.195914 ## + Fold01.Rep2: alpha=0.4018, lambda=0.086926 ## - Fold01.Rep2: alpha=0.4018, lambda=0.086926 ## + Fold01.Rep2: alpha=0.1517, lambda=1.159105 ## - Fold01.Rep2: alpha=0.1517, lambda=1.159105 ## + Fold01.Rep2: alpha=0.3660, lambda=0.692297 ## - Fold01.Rep2: alpha=0.3660, lambda=0.692297 ## + Fold01.Rep2: alpha=0.2080, lambda=0.003654 ## - Fold01.Rep2: alpha=0.2080, lambda=0.003654 ## + Fold02.Rep2: alpha=0.4004, lambda=0.002439 ## - Fold02.Rep2: alpha=0.4004, lambda=0.002439 ## + Fold02.Rep2: alpha=0.1857, lambda=1.109010 ## - Fold02.Rep2: alpha=0.1857, lambda=1.109010 ## + Fold02.Rep2: alpha=0.9054, lambda=0.120703 ## - Fold02.Rep2: alpha=0.9054, lambda=0.120703 ## + Fold02.Rep2: alpha=0.5759, lambda=1.247636 ## - Fold02.Rep2: alpha=0.5759, lambda=1.247636 ## + Fold02.Rep2: alpha=0.2560, lambda=0.003753 ## - Fold02.Rep2: alpha=0.2560, lambda=0.003753 ## + Fold02.Rep2: alpha=0.7879, lambda=0.195914 ## - Fold02.Rep2: alpha=0.7879, lambda=0.195914 ## + Fold02.Rep2: alpha=0.4018, lambda=0.086926 ## - Fold02.Rep2: alpha=0.4018, lambda=0.086926 ## + Fold02.Rep2: alpha=0.1517, lambda=1.159105 ## - Fold02.Rep2: alpha=0.1517, lambda=1.159105 ## + Fold02.Rep2: alpha=0.3660, lambda=0.692297 ## - Fold02.Rep2: alpha=0.3660, lambda=0.692297 ## + Fold02.Rep2: alpha=0.2080, lambda=0.003654 ## - Fold02.Rep2: alpha=0.2080, lambda=0.003654 ## + Fold03.Rep2: alpha=0.4004, lambda=0.002439 ## - Fold03.Rep2: alpha=0.4004, lambda=0.002439 ## + Fold03.Rep2: alpha=0.1857, lambda=1.109010 ## - Fold03.Rep2: alpha=0.1857, lambda=1.109010 ## + Fold03.Rep2: alpha=0.9054, lambda=0.120703 ## - Fold03.Rep2: alpha=0.9054, lambda=0.120703 ## + Fold03.Rep2: alpha=0.5759, lambda=1.247636 ## - Fold03.Rep2: alpha=0.5759, lambda=1.247636 ## + Fold03.Rep2: alpha=0.2560, lambda=0.003753 ## - Fold03.Rep2: alpha=0.2560, lambda=0.003753 ## + Fold03.Rep2: alpha=0.7879, lambda=0.195914 ## - Fold03.Rep2: alpha=0.7879, lambda=0.195914 ## + Fold03.Rep2: alpha=0.4018, lambda=0.086926 ## - Fold03.Rep2: alpha=0.4018, lambda=0.086926 ## + Fold03.Rep2: alpha=0.1517, lambda=1.159105 ## - Fold03.Rep2: alpha=0.1517, lambda=1.159105 ## + Fold03.Rep2: alpha=0.3660, lambda=0.692297 ## - Fold03.Rep2: alpha=0.3660, lambda=0.692297 ## + Fold03.Rep2: alpha=0.2080, lambda=0.003654 ## - Fold03.Rep2: alpha=0.2080, lambda=0.003654 ## + Fold04.Rep2: alpha=0.4004, lambda=0.002439 ## - Fold04.Rep2: alpha=0.4004, lambda=0.002439 ## + Fold04.Rep2: alpha=0.1857, lambda=1.109010 ## - Fold04.Rep2: alpha=0.1857, lambda=1.109010 ## + Fold04.Rep2: alpha=0.9054, lambda=0.120703 ## - Fold04.Rep2: alpha=0.9054, lambda=0.120703 ## + Fold04.Rep2: alpha=0.5759, lambda=1.247636 ## - Fold04.Rep2: alpha=0.5759, lambda=1.247636 ## + Fold04.Rep2: alpha=0.2560, lambda=0.003753 ## - Fold04.Rep2: alpha=0.2560, lambda=0.003753 ## + Fold04.Rep2: alpha=0.7879, lambda=0.195914 ## - Fold04.Rep2: alpha=0.7879, lambda=0.195914 ## + Fold04.Rep2: alpha=0.4018, lambda=0.086926 ## - Fold04.Rep2: alpha=0.4018, lambda=0.086926 ## + Fold04.Rep2: alpha=0.1517, lambda=1.159105 ## - Fold04.Rep2: alpha=0.1517, lambda=1.159105 ## + Fold04.Rep2: alpha=0.3660, lambda=0.692297 ## - Fold04.Rep2: alpha=0.3660, lambda=0.692297 ## + Fold04.Rep2: alpha=0.2080, lambda=0.003654 ## - Fold04.Rep2: alpha=0.2080, lambda=0.003654 ## + Fold05.Rep2: alpha=0.4004, lambda=0.002439 ## - Fold05.Rep2: alpha=0.4004, lambda=0.002439 ## + Fold05.Rep2: alpha=0.1857, lambda=1.109010 ## - Fold05.Rep2: alpha=0.1857, lambda=1.109010 ## + Fold05.Rep2: alpha=0.9054, lambda=0.120703 ## - Fold05.Rep2: alpha=0.9054, lambda=0.120703 ## + Fold05.Rep2: alpha=0.5759, lambda=1.247636 ## - Fold05.Rep2: alpha=0.5759, lambda=1.247636 ## + Fold05.Rep2: alpha=0.2560, lambda=0.003753 ## - Fold05.Rep2: alpha=0.2560, lambda=0.003753 ## + Fold05.Rep2: alpha=0.7879, lambda=0.195914 ## - Fold05.Rep2: alpha=0.7879, lambda=0.195914 ## + Fold05.Rep2: alpha=0.4018, lambda=0.086926 ## - Fold05.Rep2: alpha=0.4018, lambda=0.086926 ## + Fold05.Rep2: alpha=0.1517, lambda=1.159105 ## - Fold05.Rep2: alpha=0.1517, lambda=1.159105 ## + Fold05.Rep2: alpha=0.3660, lambda=0.692297 ## - Fold05.Rep2: alpha=0.3660, lambda=0.692297 ## + Fold05.Rep2: alpha=0.2080, lambda=0.003654 ## - Fold05.Rep2: alpha=0.2080, lambda=0.003654 ## + Fold06.Rep2: alpha=0.4004, lambda=0.002439 ## - Fold06.Rep2: alpha=0.4004, lambda=0.002439 ## + Fold06.Rep2: alpha=0.1857, lambda=1.109010 ## - Fold06.Rep2: alpha=0.1857, lambda=1.109010 ## + Fold06.Rep2: alpha=0.9054, lambda=0.120703 ## - Fold06.Rep2: alpha=0.9054, lambda=0.120703 ## + Fold06.Rep2: alpha=0.5759, lambda=1.247636 ## - Fold06.Rep2: alpha=0.5759, lambda=1.247636 ## + Fold06.Rep2: alpha=0.2560, lambda=0.003753 ## - Fold06.Rep2: alpha=0.2560, lambda=0.003753 ## + Fold06.Rep2: alpha=0.7879, lambda=0.195914 ## - Fold06.Rep2: alpha=0.7879, lambda=0.195914 ## + Fold06.Rep2: alpha=0.4018, lambda=0.086926 ## - Fold06.Rep2: alpha=0.4018, lambda=0.086926 ## + Fold06.Rep2: alpha=0.1517, lambda=1.159105 ## - Fold06.Rep2: alpha=0.1517, lambda=1.159105 ## + Fold06.Rep2: alpha=0.3660, lambda=0.692297 ## - Fold06.Rep2: alpha=0.3660, lambda=0.692297 ## + Fold06.Rep2: alpha=0.2080, lambda=0.003654 ## - Fold06.Rep2: alpha=0.2080, lambda=0.003654 ## + Fold07.Rep2: alpha=0.4004, lambda=0.002439 ## - Fold07.Rep2: alpha=0.4004, lambda=0.002439 ## + Fold07.Rep2: alpha=0.1857, lambda=1.109010 ## - Fold07.Rep2: alpha=0.1857, lambda=1.109010 ## + Fold07.Rep2: alpha=0.9054, lambda=0.120703 ## - Fold07.Rep2: alpha=0.9054, lambda=0.120703 ## + Fold07.Rep2: alpha=0.5759, lambda=1.247636 ## - Fold07.Rep2: alpha=0.5759, lambda=1.247636 ## + Fold07.Rep2: alpha=0.2560, lambda=0.003753 ## - Fold07.Rep2: alpha=0.2560, lambda=0.003753 ## + Fold07.Rep2: alpha=0.7879, lambda=0.195914 ## - Fold07.Rep2: alpha=0.7879, lambda=0.195914 ## + Fold07.Rep2: alpha=0.4018, lambda=0.086926 ## - Fold07.Rep2: alpha=0.4018, lambda=0.086926 ## + Fold07.Rep2: alpha=0.1517, lambda=1.159105 ## - Fold07.Rep2: alpha=0.1517, lambda=1.159105 ## + Fold07.Rep2: alpha=0.3660, lambda=0.692297 ## - Fold07.Rep2: alpha=0.3660, lambda=0.692297 ## + Fold07.Rep2: alpha=0.2080, lambda=0.003654 ## - Fold07.Rep2: alpha=0.2080, lambda=0.003654 ## + Fold08.Rep2: alpha=0.4004, lambda=0.002439 ## - Fold08.Rep2: alpha=0.4004, lambda=0.002439 ## + Fold08.Rep2: alpha=0.1857, lambda=1.109010 ## - Fold08.Rep2: alpha=0.1857, lambda=1.109010 ## + Fold08.Rep2: alpha=0.9054, lambda=0.120703 ## - Fold08.Rep2: alpha=0.9054, lambda=0.120703 ## + Fold08.Rep2: alpha=0.5759, lambda=1.247636 ## - Fold08.Rep2: alpha=0.5759, lambda=1.247636 ## + Fold08.Rep2: alpha=0.2560, lambda=0.003753 ## - Fold08.Rep2: alpha=0.2560, lambda=0.003753 ## + Fold08.Rep2: alpha=0.7879, lambda=0.195914 ## - Fold08.Rep2: alpha=0.7879, lambda=0.195914 ## + Fold08.Rep2: alpha=0.4018, lambda=0.086926 ## - Fold08.Rep2: alpha=0.4018, lambda=0.086926 ## + Fold08.Rep2: alpha=0.1517, lambda=1.159105 ## - Fold08.Rep2: alpha=0.1517, lambda=1.159105 ## + Fold08.Rep2: alpha=0.3660, lambda=0.692297 ## - Fold08.Rep2: alpha=0.3660, lambda=0.692297 ## + Fold08.Rep2: alpha=0.2080, lambda=0.003654 ## - Fold08.Rep2: alpha=0.2080, lambda=0.003654 ## + Fold09.Rep2: alpha=0.4004, lambda=0.002439 ## - Fold09.Rep2: alpha=0.4004, lambda=0.002439 ## + Fold09.Rep2: alpha=0.1857, lambda=1.109010 ## - Fold09.Rep2: alpha=0.1857, lambda=1.109010 ## + Fold09.Rep2: alpha=0.9054, lambda=0.120703 ## - Fold09.Rep2: alpha=0.9054, lambda=0.120703 ## + Fold09.Rep2: alpha=0.5759, lambda=1.247636 ## - Fold09.Rep2: alpha=0.5759, lambda=1.247636 ## + Fold09.Rep2: alpha=0.2560, lambda=0.003753 ## - Fold09.Rep2: alpha=0.2560, lambda=0.003753 ## + Fold09.Rep2: alpha=0.7879, lambda=0.195914 ## - Fold09.Rep2: alpha=0.7879, lambda=0.195914 ## + Fold09.Rep2: alpha=0.4018, lambda=0.086926 ## - Fold09.Rep2: alpha=0.4018, lambda=0.086926 ## + Fold09.Rep2: alpha=0.1517, lambda=1.159105 ## - Fold09.Rep2: alpha=0.1517, lambda=1.159105 ## + Fold09.Rep2: alpha=0.3660, lambda=0.692297 ## - Fold09.Rep2: alpha=0.3660, lambda=0.692297 ## + Fold09.Rep2: alpha=0.2080, lambda=0.003654 ## - Fold09.Rep2: alpha=0.2080, lambda=0.003654 ## + Fold10.Rep2: alpha=0.4004, lambda=0.002439 ## - Fold10.Rep2: alpha=0.4004, lambda=0.002439 ## + Fold10.Rep2: alpha=0.1857, lambda=1.109010 ## - Fold10.Rep2: alpha=0.1857, lambda=1.109010 ## + Fold10.Rep2: alpha=0.9054, lambda=0.120703 ## - Fold10.Rep2: alpha=0.9054, lambda=0.120703 ## + Fold10.Rep2: alpha=0.5759, lambda=1.247636 ## - Fold10.Rep2: alpha=0.5759, lambda=1.247636 ## + Fold10.Rep2: alpha=0.2560, lambda=0.003753 ## - Fold10.Rep2: alpha=0.2560, lambda=0.003753 ## + Fold10.Rep2: alpha=0.7879, lambda=0.195914 ## - Fold10.Rep2: alpha=0.7879, lambda=0.195914 ## + Fold10.Rep2: alpha=0.4018, lambda=0.086926 ## - Fold10.Rep2: alpha=0.4018, lambda=0.086926 ## + Fold10.Rep2: alpha=0.1517, lambda=1.159105 ## - Fold10.Rep2: alpha=0.1517, lambda=1.159105 ## + Fold10.Rep2: alpha=0.3660, lambda=0.692297 ## - Fold10.Rep2: alpha=0.3660, lambda=0.692297 ## + Fold10.Rep2: alpha=0.2080, lambda=0.003654 ## - Fold10.Rep2: alpha=0.2080, lambda=0.003654 ## + Fold01.Rep3: alpha=0.4004, lambda=0.002439 ## - Fold01.Rep3: alpha=0.4004, lambda=0.002439 ## + Fold01.Rep3: alpha=0.1857, lambda=1.109010 ## - Fold01.Rep3: alpha=0.1857, lambda=1.109010 ## + Fold01.Rep3: alpha=0.9054, lambda=0.120703 ## - Fold01.Rep3: alpha=0.9054, lambda=0.120703 ## + Fold01.Rep3: alpha=0.5759, lambda=1.247636 ## - Fold01.Rep3: alpha=0.5759, lambda=1.247636 ## + Fold01.Rep3: alpha=0.2560, lambda=0.003753 ## - Fold01.Rep3: alpha=0.2560, lambda=0.003753 ## + Fold01.Rep3: alpha=0.7879, lambda=0.195914 ## - Fold01.Rep3: alpha=0.7879, lambda=0.195914 ## + Fold01.Rep3: alpha=0.4018, lambda=0.086926 ## - Fold01.Rep3: alpha=0.4018, lambda=0.086926 ## + Fold01.Rep3: alpha=0.1517, lambda=1.159105 ## - Fold01.Rep3: alpha=0.1517, lambda=1.159105 ## + Fold01.Rep3: alpha=0.3660, lambda=0.692297 ## - Fold01.Rep3: alpha=0.3660, lambda=0.692297 ## + Fold01.Rep3: alpha=0.2080, lambda=0.003654 ## - Fold01.Rep3: alpha=0.2080, lambda=0.003654 ## + Fold02.Rep3: alpha=0.4004, lambda=0.002439 ## - Fold02.Rep3: alpha=0.4004, lambda=0.002439 ## + Fold02.Rep3: alpha=0.1857, lambda=1.109010 ## - Fold02.Rep3: alpha=0.1857, lambda=1.109010 ## + Fold02.Rep3: alpha=0.9054, lambda=0.120703 ## - Fold02.Rep3: alpha=0.9054, lambda=0.120703 ## + Fold02.Rep3: alpha=0.5759, lambda=1.247636 ## - Fold02.Rep3: alpha=0.5759, lambda=1.247636 ## + Fold02.Rep3: alpha=0.2560, lambda=0.003753 ## - Fold02.Rep3: alpha=0.2560, lambda=0.003753 ## + Fold02.Rep3: alpha=0.7879, lambda=0.195914 ## - Fold02.Rep3: alpha=0.7879, lambda=0.195914 ## + Fold02.Rep3: alpha=0.4018, lambda=0.086926 ## - Fold02.Rep3: alpha=0.4018, lambda=0.086926 ## + Fold02.Rep3: alpha=0.1517, lambda=1.159105 ## - Fold02.Rep3: alpha=0.1517, lambda=1.159105 ## + Fold02.Rep3: alpha=0.3660, lambda=0.692297 ## - Fold02.Rep3: alpha=0.3660, lambda=0.692297 ## + Fold02.Rep3: alpha=0.2080, lambda=0.003654 ## - Fold02.Rep3: alpha=0.2080, lambda=0.003654 ## + Fold03.Rep3: alpha=0.4004, lambda=0.002439 ## - Fold03.Rep3: alpha=0.4004, lambda=0.002439 ## + Fold03.Rep3: alpha=0.1857, lambda=1.109010 ## - Fold03.Rep3: alpha=0.1857, lambda=1.109010 ## + Fold03.Rep3: alpha=0.9054, lambda=0.120703 ## - Fold03.Rep3: alpha=0.9054, lambda=0.120703 ## + Fold03.Rep3: alpha=0.5759, lambda=1.247636 ## - Fold03.Rep3: alpha=0.5759, lambda=1.247636 ## + Fold03.Rep3: alpha=0.2560, lambda=0.003753 ## - Fold03.Rep3: alpha=0.2560, lambda=0.003753 ## + Fold03.Rep3: alpha=0.7879, lambda=0.195914 ## - Fold03.Rep3: alpha=0.7879, lambda=0.195914 ## + Fold03.Rep3: alpha=0.4018, lambda=0.086926 ## - Fold03.Rep3: alpha=0.4018, lambda=0.086926 ## + Fold03.Rep3: alpha=0.1517, lambda=1.159105 ## - Fold03.Rep3: alpha=0.1517, lambda=1.159105 ## + Fold03.Rep3: alpha=0.3660, lambda=0.692297 ## - Fold03.Rep3: alpha=0.3660, lambda=0.692297 ## + Fold03.Rep3: alpha=0.2080, lambda=0.003654 ## - Fold03.Rep3: alpha=0.2080, lambda=0.003654 ## + Fold04.Rep3: alpha=0.4004, lambda=0.002439 ## - Fold04.Rep3: alpha=0.4004, lambda=0.002439 ## + Fold04.Rep3: alpha=0.1857, lambda=1.109010 ## - Fold04.Rep3: alpha=0.1857, lambda=1.109010 ## + Fold04.Rep3: alpha=0.9054, lambda=0.120703 ## - Fold04.Rep3: alpha=0.9054, lambda=0.120703 ## + Fold04.Rep3: alpha=0.5759, lambda=1.247636 ## - Fold04.Rep3: alpha=0.5759, lambda=1.247636 ## + Fold04.Rep3: alpha=0.2560, lambda=0.003753 ## - Fold04.Rep3: alpha=0.2560, lambda=0.003753 ## + Fold04.Rep3: alpha=0.7879, lambda=0.195914 ## - Fold04.Rep3: alpha=0.7879, lambda=0.195914 ## + Fold04.Rep3: alpha=0.4018, lambda=0.086926 ## - Fold04.Rep3: alpha=0.4018, lambda=0.086926 ## + Fold04.Rep3: alpha=0.1517, lambda=1.159105 ## - Fold04.Rep3: alpha=0.1517, lambda=1.159105 ## + Fold04.Rep3: alpha=0.3660, lambda=0.692297 ## - Fold04.Rep3: alpha=0.3660, lambda=0.692297 ## + Fold04.Rep3: alpha=0.2080, lambda=0.003654 ## - Fold04.Rep3: alpha=0.2080, lambda=0.003654 ## + Fold05.Rep3: alpha=0.4004, lambda=0.002439 ## - Fold05.Rep3: alpha=0.4004, lambda=0.002439 ## + Fold05.Rep3: alpha=0.1857, lambda=1.109010 ## - Fold05.Rep3: alpha=0.1857, lambda=1.109010 ## + Fold05.Rep3: alpha=0.9054, lambda=0.120703 ## - Fold05.Rep3: alpha=0.9054, lambda=0.120703 ## + Fold05.Rep3: alpha=0.5759, lambda=1.247636 ## - Fold05.Rep3: alpha=0.5759, lambda=1.247636 ## + Fold05.Rep3: alpha=0.2560, lambda=0.003753 ## - Fold05.Rep3: alpha=0.2560, lambda=0.003753 ## + Fold05.Rep3: alpha=0.7879, lambda=0.195914 ## - Fold05.Rep3: alpha=0.7879, lambda=0.195914 ## + Fold05.Rep3: alpha=0.4018, lambda=0.086926 ## - Fold05.Rep3: alpha=0.4018, lambda=0.086926 ## + Fold05.Rep3: alpha=0.1517, lambda=1.159105 ## - Fold05.Rep3: alpha=0.1517, lambda=1.159105 ## + Fold05.Rep3: alpha=0.3660, lambda=0.692297 ## - Fold05.Rep3: alpha=0.3660, lambda=0.692297 ## + Fold05.Rep3: alpha=0.2080, lambda=0.003654 ## - Fold05.Rep3: alpha=0.2080, lambda=0.003654 ## + Fold06.Rep3: alpha=0.4004, lambda=0.002439 ## - Fold06.Rep3: alpha=0.4004, lambda=0.002439 ## + Fold06.Rep3: alpha=0.1857, lambda=1.109010 ## - Fold06.Rep3: alpha=0.1857, lambda=1.109010 ## + Fold06.Rep3: alpha=0.9054, lambda=0.120703 ## - Fold06.Rep3: alpha=0.9054, lambda=0.120703 ## + Fold06.Rep3: alpha=0.5759, lambda=1.247636 ## - Fold06.Rep3: alpha=0.5759, lambda=1.247636 ## + Fold06.Rep3: alpha=0.2560, lambda=0.003753 ## - Fold06.Rep3: alpha=0.2560, lambda=0.003753 ## + Fold06.Rep3: alpha=0.7879, lambda=0.195914 ## - Fold06.Rep3: alpha=0.7879, lambda=0.195914 ## + Fold06.Rep3: alpha=0.4018, lambda=0.086926 ## - Fold06.Rep3: alpha=0.4018, lambda=0.086926 ## + Fold06.Rep3: alpha=0.1517, lambda=1.159105 ## - Fold06.Rep3: alpha=0.1517, lambda=1.159105 ## + Fold06.Rep3: alpha=0.3660, lambda=0.692297 ## - Fold06.Rep3: alpha=0.3660, lambda=0.692297 ## + Fold06.Rep3: alpha=0.2080, lambda=0.003654 ## - Fold06.Rep3: alpha=0.2080, lambda=0.003654 ## + Fold07.Rep3: alpha=0.4004, lambda=0.002439 ## - Fold07.Rep3: alpha=0.4004, lambda=0.002439 ## + Fold07.Rep3: alpha=0.1857, lambda=1.109010 ## - Fold07.Rep3: alpha=0.1857, lambda=1.109010 ## + Fold07.Rep3: alpha=0.9054, lambda=0.120703 ## - Fold07.Rep3: alpha=0.9054, lambda=0.120703 ## + Fold07.Rep3: alpha=0.5759, lambda=1.247636 ## - Fold07.Rep3: alpha=0.5759, lambda=1.247636 ## + Fold07.Rep3: alpha=0.2560, lambda=0.003753 ## - Fold07.Rep3: alpha=0.2560, lambda=0.003753 ## + Fold07.Rep3: alpha=0.7879, lambda=0.195914 ## - Fold07.Rep3: alpha=0.7879, lambda=0.195914 ## + Fold07.Rep3: alpha=0.4018, lambda=0.086926 ## - Fold07.Rep3: alpha=0.4018, lambda=0.086926 ## + Fold07.Rep3: alpha=0.1517, lambda=1.159105 ## - Fold07.Rep3: alpha=0.1517, lambda=1.159105 ## + Fold07.Rep3: alpha=0.3660, lambda=0.692297 ## - Fold07.Rep3: alpha=0.3660, lambda=0.692297 ## + Fold07.Rep3: alpha=0.2080, lambda=0.003654 ## - Fold07.Rep3: alpha=0.2080, lambda=0.003654 ## + Fold08.Rep3: alpha=0.4004, lambda=0.002439 ## - Fold08.Rep3: alpha=0.4004, lambda=0.002439 ## + Fold08.Rep3: alpha=0.1857, lambda=1.109010 ## - Fold08.Rep3: alpha=0.1857, lambda=1.109010 ## + Fold08.Rep3: alpha=0.9054, lambda=0.120703 ## - Fold08.Rep3: alpha=0.9054, lambda=0.120703 ## + Fold08.Rep3: alpha=0.5759, lambda=1.247636 ## - Fold08.Rep3: alpha=0.5759, lambda=1.247636 ## + Fold08.Rep3: alpha=0.2560, lambda=0.003753 ## - Fold08.Rep3: alpha=0.2560, lambda=0.003753 ## + Fold08.Rep3: alpha=0.7879, lambda=0.195914 ## - Fold08.Rep3: alpha=0.7879, lambda=0.195914 ## + Fold08.Rep3: alpha=0.4018, lambda=0.086926 ## - Fold08.Rep3: alpha=0.4018, lambda=0.086926 ## + Fold08.Rep3: alpha=0.1517, lambda=1.159105 ## - Fold08.Rep3: alpha=0.1517, lambda=1.159105 ## + Fold08.Rep3: alpha=0.3660, lambda=0.692297 ## - Fold08.Rep3: alpha=0.3660, lambda=0.692297 ## + Fold08.Rep3: alpha=0.2080, lambda=0.003654 ## - Fold08.Rep3: alpha=0.2080, lambda=0.003654 ## + Fold09.Rep3: alpha=0.4004, lambda=0.002439 ## - Fold09.Rep3: alpha=0.4004, lambda=0.002439 ## + Fold09.Rep3: alpha=0.1857, lambda=1.109010 ## - Fold09.Rep3: alpha=0.1857, lambda=1.109010 ## + Fold09.Rep3: alpha=0.9054, lambda=0.120703 ## - Fold09.Rep3: alpha=0.9054, lambda=0.120703 ## + Fold09.Rep3: alpha=0.5759, lambda=1.247636 ## - Fold09.Rep3: alpha=0.5759, lambda=1.247636 ## + Fold09.Rep3: alpha=0.2560, lambda=0.003753 ## - Fold09.Rep3: alpha=0.2560, lambda=0.003753 ## + Fold09.Rep3: alpha=0.7879, lambda=0.195914 ## - Fold09.Rep3: alpha=0.7879, lambda=0.195914 ## + Fold09.Rep3: alpha=0.4018, lambda=0.086926 ## - Fold09.Rep3: alpha=0.4018, lambda=0.086926 ## + Fold09.Rep3: alpha=0.1517, lambda=1.159105 ## - Fold09.Rep3: alpha=0.1517, lambda=1.159105 ## + Fold09.Rep3: alpha=0.3660, lambda=0.692297 ## - Fold09.Rep3: alpha=0.3660, lambda=0.692297 ## + Fold09.Rep3: alpha=0.2080, lambda=0.003654 ## - Fold09.Rep3: alpha=0.2080, lambda=0.003654 ## + Fold10.Rep3: alpha=0.4004, lambda=0.002439 ## - Fold10.Rep3: alpha=0.4004, lambda=0.002439 ## + Fold10.Rep3: alpha=0.1857, lambda=1.109010 ## - Fold10.Rep3: alpha=0.1857, lambda=1.109010 ## + Fold10.Rep3: alpha=0.9054, lambda=0.120703 ## - Fold10.Rep3: alpha=0.9054, lambda=0.120703 ## + Fold10.Rep3: alpha=0.5759, lambda=1.247636 ## - Fold10.Rep3: alpha=0.5759, lambda=1.247636 ## + Fold10.Rep3: alpha=0.2560, lambda=0.003753 ## - Fold10.Rep3: alpha=0.2560, lambda=0.003753 ## + Fold10.Rep3: alpha=0.7879, lambda=0.195914 ## - Fold10.Rep3: alpha=0.7879, lambda=0.195914 ## + Fold10.Rep3: alpha=0.4018, lambda=0.086926 ## - Fold10.Rep3: alpha=0.4018, lambda=0.086926 ## + Fold10.Rep3: alpha=0.1517, lambda=1.159105 ## - Fold10.Rep3: alpha=0.1517, lambda=1.159105 ## + Fold10.Rep3: alpha=0.3660, lambda=0.692297 ## - Fold10.Rep3: alpha=0.3660, lambda=0.692297 ## + Fold10.Rep3: alpha=0.2080, lambda=0.003654 ## - Fold10.Rep3: alpha=0.2080, lambda=0.003654 ## + Fold01.Rep4: alpha=0.4004, lambda=0.002439 ## - Fold01.Rep4: alpha=0.4004, lambda=0.002439 ## + Fold01.Rep4: alpha=0.1857, lambda=1.109010 ## - Fold01.Rep4: alpha=0.1857, lambda=1.109010 ## + Fold01.Rep4: alpha=0.9054, lambda=0.120703 ## - Fold01.Rep4: alpha=0.9054, lambda=0.120703 ## + Fold01.Rep4: alpha=0.5759, lambda=1.247636 ## - Fold01.Rep4: alpha=0.5759, lambda=1.247636 ## + Fold01.Rep4: alpha=0.2560, lambda=0.003753 ## - Fold01.Rep4: alpha=0.2560, lambda=0.003753 ## + Fold01.Rep4: alpha=0.7879, lambda=0.195914 ## - Fold01.Rep4: alpha=0.7879, lambda=0.195914 ## + Fold01.Rep4: alpha=0.4018, lambda=0.086926 ## - Fold01.Rep4: alpha=0.4018, lambda=0.086926 ## + Fold01.Rep4: alpha=0.1517, lambda=1.159105 ## - Fold01.Rep4: alpha=0.1517, lambda=1.159105 ## + Fold01.Rep4: alpha=0.3660, lambda=0.692297 ## - Fold01.Rep4: alpha=0.3660, lambda=0.692297 ## + Fold01.Rep4: alpha=0.2080, lambda=0.003654 ## - Fold01.Rep4: alpha=0.2080, lambda=0.003654 ## + Fold02.Rep4: alpha=0.4004, lambda=0.002439 ## - Fold02.Rep4: alpha=0.4004, lambda=0.002439 ## + Fold02.Rep4: alpha=0.1857, lambda=1.109010 ## - Fold02.Rep4: alpha=0.1857, lambda=1.109010 ## + Fold02.Rep4: alpha=0.9054, lambda=0.120703 ## - Fold02.Rep4: alpha=0.9054, lambda=0.120703 ## + Fold02.Rep4: alpha=0.5759, lambda=1.247636 ## - Fold02.Rep4: alpha=0.5759, lambda=1.247636 ## + Fold02.Rep4: alpha=0.2560, lambda=0.003753 ## - Fold02.Rep4: alpha=0.2560, lambda=0.003753 ## + Fold02.Rep4: alpha=0.7879, lambda=0.195914 ## - Fold02.Rep4: alpha=0.7879, lambda=0.195914 ## + Fold02.Rep4: alpha=0.4018, lambda=0.086926 ## - Fold02.Rep4: alpha=0.4018, lambda=0.086926 ## + Fold02.Rep4: alpha=0.1517, lambda=1.159105 ## - Fold02.Rep4: alpha=0.1517, lambda=1.159105 ## + Fold02.Rep4: alpha=0.3660, lambda=0.692297 ## - Fold02.Rep4: alpha=0.3660, lambda=0.692297 ## + Fold02.Rep4: alpha=0.2080, lambda=0.003654 ## - Fold02.Rep4: alpha=0.2080, lambda=0.003654 ## + Fold03.Rep4: alpha=0.4004, lambda=0.002439 ## - Fold03.Rep4: alpha=0.4004, lambda=0.002439 ## + Fold03.Rep4: alpha=0.1857, lambda=1.109010 ## - Fold03.Rep4: alpha=0.1857, lambda=1.109010 ## + Fold03.Rep4: alpha=0.9054, lambda=0.120703 ## - Fold03.Rep4: alpha=0.9054, lambda=0.120703 ## + Fold03.Rep4: alpha=0.5759, lambda=1.247636 ## - Fold03.Rep4: alpha=0.5759, lambda=1.247636 ## + Fold03.Rep4: alpha=0.2560, lambda=0.003753 ## - Fold03.Rep4: alpha=0.2560, lambda=0.003753 ## + Fold03.Rep4: alpha=0.7879, lambda=0.195914 ## - Fold03.Rep4: alpha=0.7879, lambda=0.195914 ## + Fold03.Rep4: alpha=0.4018, lambda=0.086926 ## - Fold03.Rep4: alpha=0.4018, lambda=0.086926 ## + Fold03.Rep4: alpha=0.1517, lambda=1.159105 ## - Fold03.Rep4: alpha=0.1517, lambda=1.159105 ## + Fold03.Rep4: alpha=0.3660, lambda=0.692297 ## - Fold03.Rep4: alpha=0.3660, lambda=0.692297 ## + Fold03.Rep4: alpha=0.2080, lambda=0.003654 ## - Fold03.Rep4: alpha=0.2080, lambda=0.003654 ## + Fold04.Rep4: alpha=0.4004, lambda=0.002439 ## - Fold04.Rep4: alpha=0.4004, lambda=0.002439 ## + Fold04.Rep4: alpha=0.1857, lambda=1.109010 ## - Fold04.Rep4: alpha=0.1857, lambda=1.109010 ## + Fold04.Rep4: alpha=0.9054, lambda=0.120703 ## - Fold04.Rep4: alpha=0.9054, lambda=0.120703 ## + Fold04.Rep4: alpha=0.5759, lambda=1.247636 ## - Fold04.Rep4: alpha=0.5759, lambda=1.247636 ## + Fold04.Rep4: alpha=0.2560, lambda=0.003753 ## - Fold04.Rep4: alpha=0.2560, lambda=0.003753 ## + Fold04.Rep4: alpha=0.7879, lambda=0.195914 ## - Fold04.Rep4: alpha=0.7879, lambda=0.195914 ## + Fold04.Rep4: alpha=0.4018, lambda=0.086926 ## - Fold04.Rep4: alpha=0.4018, lambda=0.086926 ## + Fold04.Rep4: alpha=0.1517, lambda=1.159105 ## - Fold04.Rep4: alpha=0.1517, lambda=1.159105 ## + Fold04.Rep4: alpha=0.3660, lambda=0.692297 ## - Fold04.Rep4: alpha=0.3660, lambda=0.692297 ## + Fold04.Rep4: alpha=0.2080, lambda=0.003654 ## - Fold04.Rep4: alpha=0.2080, lambda=0.003654 ## + Fold05.Rep4: alpha=0.4004, lambda=0.002439 ## - Fold05.Rep4: alpha=0.4004, lambda=0.002439 ## + Fold05.Rep4: alpha=0.1857, lambda=1.109010 ## - Fold05.Rep4: alpha=0.1857, lambda=1.109010 ## + Fold05.Rep4: alpha=0.9054, lambda=0.120703 ## - Fold05.Rep4: alpha=0.9054, lambda=0.120703 ## + Fold05.Rep4: alpha=0.5759, lambda=1.247636 ## - Fold05.Rep4: alpha=0.5759, lambda=1.247636 ## + Fold05.Rep4: alpha=0.2560, lambda=0.003753 ## - Fold05.Rep4: alpha=0.2560, lambda=0.003753 ## + Fold05.Rep4: alpha=0.7879, lambda=0.195914 ## - Fold05.Rep4: alpha=0.7879, lambda=0.195914 ## + Fold05.Rep4: alpha=0.4018, lambda=0.086926 ## - Fold05.Rep4: alpha=0.4018, lambda=0.086926 ## + Fold05.Rep4: alpha=0.1517, lambda=1.159105 ## - Fold05.Rep4: alpha=0.1517, lambda=1.159105 ## + Fold05.Rep4: alpha=0.3660, lambda=0.692297 ## - Fold05.Rep4: alpha=0.3660, lambda=0.692297 ## + Fold05.Rep4: alpha=0.2080, lambda=0.003654 ## - Fold05.Rep4: alpha=0.2080, lambda=0.003654 ## + Fold06.Rep4: alpha=0.4004, lambda=0.002439 ## - Fold06.Rep4: alpha=0.4004, lambda=0.002439 ## + Fold06.Rep4: alpha=0.1857, lambda=1.109010 ## - Fold06.Rep4: alpha=0.1857, lambda=1.109010 ## + Fold06.Rep4: alpha=0.9054, lambda=0.120703 ## - Fold06.Rep4: alpha=0.9054, lambda=0.120703 ## + Fold06.Rep4: alpha=0.5759, lambda=1.247636 ## - Fold06.Rep4: alpha=0.5759, lambda=1.247636 ## + Fold06.Rep4: alpha=0.2560, lambda=0.003753 ## - Fold06.Rep4: alpha=0.2560, lambda=0.003753 ## + Fold06.Rep4: alpha=0.7879, lambda=0.195914 ## - Fold06.Rep4: alpha=0.7879, lambda=0.195914 ## + Fold06.Rep4: alpha=0.4018, lambda=0.086926 ## - Fold06.Rep4: alpha=0.4018, lambda=0.086926 ## + Fold06.Rep4: alpha=0.1517, lambda=1.159105 ## - Fold06.Rep4: alpha=0.1517, lambda=1.159105 ## + Fold06.Rep4: alpha=0.3660, lambda=0.692297 ## - Fold06.Rep4: alpha=0.3660, lambda=0.692297 ## + Fold06.Rep4: alpha=0.2080, lambda=0.003654 ## - Fold06.Rep4: alpha=0.2080, lambda=0.003654 ## + Fold07.Rep4: alpha=0.4004, lambda=0.002439 ## - Fold07.Rep4: alpha=0.4004, lambda=0.002439 ## + Fold07.Rep4: alpha=0.1857, lambda=1.109010 ## - Fold07.Rep4: alpha=0.1857, lambda=1.109010 ## + Fold07.Rep4: alpha=0.9054, lambda=0.120703 ## - Fold07.Rep4: alpha=0.9054, lambda=0.120703 ## + Fold07.Rep4: alpha=0.5759, lambda=1.247636 ## - Fold07.Rep4: alpha=0.5759, lambda=1.247636 ## + Fold07.Rep4: alpha=0.2560, lambda=0.003753 ## - Fold07.Rep4: alpha=0.2560, lambda=0.003753 ## + Fold07.Rep4: alpha=0.7879, lambda=0.195914 ## - Fold07.Rep4: alpha=0.7879, lambda=0.195914 ## + Fold07.Rep4: alpha=0.4018, lambda=0.086926 ## - Fold07.Rep4: alpha=0.4018, lambda=0.086926 ## + Fold07.Rep4: alpha=0.1517, lambda=1.159105 ## - Fold07.Rep4: alpha=0.1517, lambda=1.159105 ## + Fold07.Rep4: alpha=0.3660, lambda=0.692297 ## - Fold07.Rep4: alpha=0.3660, lambda=0.692297 ## + Fold07.Rep4: alpha=0.2080, lambda=0.003654 ## - Fold07.Rep4: alpha=0.2080, lambda=0.003654 ## + Fold08.Rep4: alpha=0.4004, lambda=0.002439 ## - Fold08.Rep4: alpha=0.4004, lambda=0.002439 ## + Fold08.Rep4: alpha=0.1857, lambda=1.109010 ## - Fold08.Rep4: alpha=0.1857, lambda=1.109010 ## + Fold08.Rep4: alpha=0.9054, lambda=0.120703 ## - Fold08.Rep4: alpha=0.9054, lambda=0.120703 ## + Fold08.Rep4: alpha=0.5759, lambda=1.247636 ## - Fold08.Rep4: alpha=0.5759, lambda=1.247636 ## + Fold08.Rep4: alpha=0.2560, lambda=0.003753 ## - Fold08.Rep4: alpha=0.2560, lambda=0.003753 ## + Fold08.Rep4: alpha=0.7879, lambda=0.195914 ## - Fold08.Rep4: alpha=0.7879, lambda=0.195914 ## + Fold08.Rep4: alpha=0.4018, lambda=0.086926 ## - Fold08.Rep4: alpha=0.4018, lambda=0.086926 ## + Fold08.Rep4: alpha=0.1517, lambda=1.159105 ## - Fold08.Rep4: alpha=0.1517, lambda=1.159105 ## + Fold08.Rep4: alpha=0.3660, lambda=0.692297 ## - Fold08.Rep4: alpha=0.3660, lambda=0.692297 ## + Fold08.Rep4: alpha=0.2080, lambda=0.003654 ## - Fold08.Rep4: alpha=0.2080, lambda=0.003654 ## + Fold09.Rep4: alpha=0.4004, lambda=0.002439 ## - Fold09.Rep4: alpha=0.4004, lambda=0.002439 ## + Fold09.Rep4: alpha=0.1857, lambda=1.109010 ## - Fold09.Rep4: alpha=0.1857, lambda=1.109010 ## + Fold09.Rep4: alpha=0.9054, lambda=0.120703 ## - Fold09.Rep4: alpha=0.9054, lambda=0.120703 ## + Fold09.Rep4: alpha=0.5759, lambda=1.247636 ## - Fold09.Rep4: alpha=0.5759, lambda=1.247636 ## + Fold09.Rep4: alpha=0.2560, lambda=0.003753 ## - Fold09.Rep4: alpha=0.2560, lambda=0.003753 ## + Fold09.Rep4: alpha=0.7879, lambda=0.195914 ## - Fold09.Rep4: alpha=0.7879, lambda=0.195914 ## + Fold09.Rep4: alpha=0.4018, lambda=0.086926 ## - Fold09.Rep4: alpha=0.4018, lambda=0.086926 ## + Fold09.Rep4: alpha=0.1517, lambda=1.159105 ## - Fold09.Rep4: alpha=0.1517, lambda=1.159105 ## + Fold09.Rep4: alpha=0.3660, lambda=0.692297 ## - Fold09.Rep4: alpha=0.3660, lambda=0.692297 ## + Fold09.Rep4: alpha=0.2080, lambda=0.003654 ## - Fold09.Rep4: alpha=0.2080, lambda=0.003654 ## + Fold10.Rep4: alpha=0.4004, lambda=0.002439 ## - Fold10.Rep4: alpha=0.4004, lambda=0.002439 ## + Fold10.Rep4: alpha=0.1857, lambda=1.109010 ## - Fold10.Rep4: alpha=0.1857, lambda=1.109010 ## + Fold10.Rep4: alpha=0.9054, lambda=0.120703 ## - Fold10.Rep4: alpha=0.9054, lambda=0.120703 ## + Fold10.Rep4: alpha=0.5759, lambda=1.247636 ## - Fold10.Rep4: alpha=0.5759, lambda=1.247636 ## + Fold10.Rep4: alpha=0.2560, lambda=0.003753 ## - Fold10.Rep4: alpha=0.2560, lambda=0.003753 ## + Fold10.Rep4: alpha=0.7879, lambda=0.195914 ## - Fold10.Rep4: alpha=0.7879, lambda=0.195914 ## + Fold10.Rep4: alpha=0.4018, lambda=0.086926 ## - Fold10.Rep4: alpha=0.4018, lambda=0.086926 ## + Fold10.Rep4: alpha=0.1517, lambda=1.159105 ## - Fold10.Rep4: alpha=0.1517, lambda=1.159105 ## + Fold10.Rep4: alpha=0.3660, lambda=0.692297 ## - Fold10.Rep4: alpha=0.3660, lambda=0.692297 ## + Fold10.Rep4: alpha=0.2080, lambda=0.003654 ## - Fold10.Rep4: alpha=0.2080, lambda=0.003654 ## + Fold01.Rep5: alpha=0.4004, lambda=0.002439 ## - Fold01.Rep5: alpha=0.4004, lambda=0.002439 ## + Fold01.Rep5: alpha=0.1857, lambda=1.109010 ## - Fold01.Rep5: alpha=0.1857, lambda=1.109010 ## + Fold01.Rep5: alpha=0.9054, lambda=0.120703 ## - Fold01.Rep5: alpha=0.9054, lambda=0.120703 ## + Fold01.Rep5: alpha=0.5759, lambda=1.247636 ## - Fold01.Rep5: alpha=0.5759, lambda=1.247636 ## + Fold01.Rep5: alpha=0.2560, lambda=0.003753 ## - Fold01.Rep5: alpha=0.2560, lambda=0.003753 ## + Fold01.Rep5: alpha=0.7879, lambda=0.195914 ## - Fold01.Rep5: alpha=0.7879, lambda=0.195914 ## + Fold01.Rep5: alpha=0.4018, lambda=0.086926 ## - Fold01.Rep5: alpha=0.4018, lambda=0.086926 ## + Fold01.Rep5: alpha=0.1517, lambda=1.159105 ## - Fold01.Rep5: alpha=0.1517, lambda=1.159105 ## + Fold01.Rep5: alpha=0.3660, lambda=0.692297 ## - Fold01.Rep5: alpha=0.3660, lambda=0.692297 ## + Fold01.Rep5: alpha=0.2080, lambda=0.003654 ## - Fold01.Rep5: alpha=0.2080, lambda=0.003654 ## + Fold02.Rep5: alpha=0.4004, lambda=0.002439 ## - Fold02.Rep5: alpha=0.4004, lambda=0.002439 ## + Fold02.Rep5: alpha=0.1857, lambda=1.109010 ## - Fold02.Rep5: alpha=0.1857, lambda=1.109010 ## + Fold02.Rep5: alpha=0.9054, lambda=0.120703 ## - Fold02.Rep5: alpha=0.9054, lambda=0.120703 ## + Fold02.Rep5: alpha=0.5759, lambda=1.247636 ## - Fold02.Rep5: alpha=0.5759, lambda=1.247636 ## + Fold02.Rep5: alpha=0.2560, lambda=0.003753 ## - Fold02.Rep5: alpha=0.2560, lambda=0.003753 ## + Fold02.Rep5: alpha=0.7879, lambda=0.195914 ## - Fold02.Rep5: alpha=0.7879, lambda=0.195914 ## + Fold02.Rep5: alpha=0.4018, lambda=0.086926 ## - Fold02.Rep5: alpha=0.4018, lambda=0.086926 ## + Fold02.Rep5: alpha=0.1517, lambda=1.159105 ## - Fold02.Rep5: alpha=0.1517, lambda=1.159105 ## + Fold02.Rep5: alpha=0.3660, lambda=0.692297 ## - Fold02.Rep5: alpha=0.3660, lambda=0.692297 ## + Fold02.Rep5: alpha=0.2080, lambda=0.003654 ## - Fold02.Rep5: alpha=0.2080, lambda=0.003654 ## + Fold03.Rep5: alpha=0.4004, lambda=0.002439 ## - Fold03.Rep5: alpha=0.4004, lambda=0.002439 ## + Fold03.Rep5: alpha=0.1857, lambda=1.109010 ## - Fold03.Rep5: alpha=0.1857, lambda=1.109010 ## + Fold03.Rep5: alpha=0.9054, lambda=0.120703 ## - Fold03.Rep5: alpha=0.9054, lambda=0.120703 ## + Fold03.Rep5: alpha=0.5759, lambda=1.247636 ## - Fold03.Rep5: alpha=0.5759, lambda=1.247636 ## + Fold03.Rep5: alpha=0.2560, lambda=0.003753 ## - Fold03.Rep5: alpha=0.2560, lambda=0.003753 ## + Fold03.Rep5: alpha=0.7879, lambda=0.195914 ## - Fold03.Rep5: alpha=0.7879, lambda=0.195914 ## + Fold03.Rep5: alpha=0.4018, lambda=0.086926 ## - Fold03.Rep5: alpha=0.4018, lambda=0.086926 ## + Fold03.Rep5: alpha=0.1517, lambda=1.159105 ## - Fold03.Rep5: alpha=0.1517, lambda=1.159105 ## + Fold03.Rep5: alpha=0.3660, lambda=0.692297 ## - Fold03.Rep5: alpha=0.3660, lambda=0.692297 ## + Fold03.Rep5: alpha=0.2080, lambda=0.003654 ## - Fold03.Rep5: alpha=0.2080, lambda=0.003654 ## + Fold04.Rep5: alpha=0.4004, lambda=0.002439 ## - Fold04.Rep5: alpha=0.4004, lambda=0.002439 ## + Fold04.Rep5: alpha=0.1857, lambda=1.109010 ## - Fold04.Rep5: alpha=0.1857, lambda=1.109010 ## + Fold04.Rep5: alpha=0.9054, lambda=0.120703 ## - Fold04.Rep5: alpha=0.9054, lambda=0.120703 ## + Fold04.Rep5: alpha=0.5759, lambda=1.247636 ## - Fold04.Rep5: alpha=0.5759, lambda=1.247636 ## + Fold04.Rep5: alpha=0.2560, lambda=0.003753 ## - Fold04.Rep5: alpha=0.2560, lambda=0.003753 ## + Fold04.Rep5: alpha=0.7879, lambda=0.195914 ## - Fold04.Rep5: alpha=0.7879, lambda=0.195914 ## + Fold04.Rep5: alpha=0.4018, lambda=0.086926 ## - Fold04.Rep5: alpha=0.4018, lambda=0.086926 ## + Fold04.Rep5: alpha=0.1517, lambda=1.159105 ## - Fold04.Rep5: alpha=0.1517, lambda=1.159105 ## + Fold04.Rep5: alpha=0.3660, lambda=0.692297 ## - Fold04.Rep5: alpha=0.3660, lambda=0.692297 ## + Fold04.Rep5: alpha=0.2080, lambda=0.003654 ## - Fold04.Rep5: alpha=0.2080, lambda=0.003654 ## + Fold05.Rep5: alpha=0.4004, lambda=0.002439 ## - Fold05.Rep5: alpha=0.4004, lambda=0.002439 ## + Fold05.Rep5: alpha=0.1857, lambda=1.109010 ## - Fold05.Rep5: alpha=0.1857, lambda=1.109010 ## + Fold05.Rep5: alpha=0.9054, lambda=0.120703 ## - Fold05.Rep5: alpha=0.9054, lambda=0.120703 ## + Fold05.Rep5: alpha=0.5759, lambda=1.247636 ## - Fold05.Rep5: alpha=0.5759, lambda=1.247636 ## + Fold05.Rep5: alpha=0.2560, lambda=0.003753 ## - Fold05.Rep5: alpha=0.2560, lambda=0.003753 ## + Fold05.Rep5: alpha=0.7879, lambda=0.195914 ## - Fold05.Rep5: alpha=0.7879, lambda=0.195914 ## + Fold05.Rep5: alpha=0.4018, lambda=0.086926 ## - Fold05.Rep5: alpha=0.4018, lambda=0.086926 ## + Fold05.Rep5: alpha=0.1517, lambda=1.159105 ## - Fold05.Rep5: alpha=0.1517, lambda=1.159105 ## + Fold05.Rep5: alpha=0.3660, lambda=0.692297 ## - Fold05.Rep5: alpha=0.3660, lambda=0.692297 ## + Fold05.Rep5: alpha=0.2080, lambda=0.003654 ## - Fold05.Rep5: alpha=0.2080, lambda=0.003654 ## + Fold06.Rep5: alpha=0.4004, lambda=0.002439 ## - Fold06.Rep5: alpha=0.4004, lambda=0.002439 ## + Fold06.Rep5: alpha=0.1857, lambda=1.109010 ## - Fold06.Rep5: alpha=0.1857, lambda=1.109010 ## + Fold06.Rep5: alpha=0.9054, lambda=0.120703 ## - Fold06.Rep5: alpha=0.9054, lambda=0.120703 ## + Fold06.Rep5: alpha=0.5759, lambda=1.247636 ## - Fold06.Rep5: alpha=0.5759, lambda=1.247636 ## + Fold06.Rep5: alpha=0.2560, lambda=0.003753 ## - Fold06.Rep5: alpha=0.2560, lambda=0.003753 ## + Fold06.Rep5: alpha=0.7879, lambda=0.195914 ## - Fold06.Rep5: alpha=0.7879, lambda=0.195914 ## + Fold06.Rep5: alpha=0.4018, lambda=0.086926 ## - Fold06.Rep5: alpha=0.4018, lambda=0.086926 ## + Fold06.Rep5: alpha=0.1517, lambda=1.159105 ## - Fold06.Rep5: alpha=0.1517, lambda=1.159105 ## + Fold06.Rep5: alpha=0.3660, lambda=0.692297 ## - Fold06.Rep5: alpha=0.3660, lambda=0.692297 ## + Fold06.Rep5: alpha=0.2080, lambda=0.003654 ## - Fold06.Rep5: alpha=0.2080, lambda=0.003654 ## + Fold07.Rep5: alpha=0.4004, lambda=0.002439 ## - Fold07.Rep5: alpha=0.4004, lambda=0.002439 ## + Fold07.Rep5: alpha=0.1857, lambda=1.109010 ## - Fold07.Rep5: alpha=0.1857, lambda=1.109010 ## + Fold07.Rep5: alpha=0.9054, lambda=0.120703 ## - Fold07.Rep5: alpha=0.9054, lambda=0.120703 ## + Fold07.Rep5: alpha=0.5759, lambda=1.247636 ## - Fold07.Rep5: alpha=0.5759, lambda=1.247636 ## + Fold07.Rep5: alpha=0.2560, lambda=0.003753 ## - Fold07.Rep5: alpha=0.2560, lambda=0.003753 ## + Fold07.Rep5: alpha=0.7879, lambda=0.195914 ## - Fold07.Rep5: alpha=0.7879, lambda=0.195914 ## + Fold07.Rep5: alpha=0.4018, lambda=0.086926 ## - Fold07.Rep5: alpha=0.4018, lambda=0.086926 ## + Fold07.Rep5: alpha=0.1517, lambda=1.159105 ## - Fold07.Rep5: alpha=0.1517, lambda=1.159105 ## + Fold07.Rep5: alpha=0.3660, lambda=0.692297 ## - Fold07.Rep5: alpha=0.3660, lambda=0.692297 ## + Fold07.Rep5: alpha=0.2080, lambda=0.003654 ## - Fold07.Rep5: alpha=0.2080, lambda=0.003654 ## + Fold08.Rep5: alpha=0.4004, lambda=0.002439 ## - Fold08.Rep5: alpha=0.4004, lambda=0.002439 ## + Fold08.Rep5: alpha=0.1857, lambda=1.109010 ## - Fold08.Rep5: alpha=0.1857, lambda=1.109010 ## + Fold08.Rep5: alpha=0.9054, lambda=0.120703 ## - Fold08.Rep5: alpha=0.9054, lambda=0.120703 ## + Fold08.Rep5: alpha=0.5759, lambda=1.247636 ## - Fold08.Rep5: alpha=0.5759, lambda=1.247636 ## + Fold08.Rep5: alpha=0.2560, lambda=0.003753 ## - Fold08.Rep5: alpha=0.2560, lambda=0.003753 ## + Fold08.Rep5: alpha=0.7879, lambda=0.195914 ## - Fold08.Rep5: alpha=0.7879, lambda=0.195914 ## + Fold08.Rep5: alpha=0.4018, lambda=0.086926 ## - Fold08.Rep5: alpha=0.4018, lambda=0.086926 ## + Fold08.Rep5: alpha=0.1517, lambda=1.159105 ## - Fold08.Rep5: alpha=0.1517, lambda=1.159105 ## + Fold08.Rep5: alpha=0.3660, lambda=0.692297 ## - Fold08.Rep5: alpha=0.3660, lambda=0.692297 ## + Fold08.Rep5: alpha=0.2080, lambda=0.003654 ## - Fold08.Rep5: alpha=0.2080, lambda=0.003654 ## + Fold09.Rep5: alpha=0.4004, lambda=0.002439 ## - Fold09.Rep5: alpha=0.4004, lambda=0.002439 ## + Fold09.Rep5: alpha=0.1857, lambda=1.109010 ## - Fold09.Rep5: alpha=0.1857, lambda=1.109010 ## + Fold09.Rep5: alpha=0.9054, lambda=0.120703 ## - Fold09.Rep5: alpha=0.9054, lambda=0.120703 ## + Fold09.Rep5: alpha=0.5759, lambda=1.247636 ## - Fold09.Rep5: alpha=0.5759, lambda=1.247636 ## + Fold09.Rep5: alpha=0.2560, lambda=0.003753 ## - Fold09.Rep5: alpha=0.2560, lambda=0.003753 ## + Fold09.Rep5: alpha=0.7879, lambda=0.195914 ## - Fold09.Rep5: alpha=0.7879, lambda=0.195914 ## + Fold09.Rep5: alpha=0.4018, lambda=0.086926 ## - Fold09.Rep5: alpha=0.4018, lambda=0.086926 ## + Fold09.Rep5: alpha=0.1517, lambda=1.159105 ## - Fold09.Rep5: alpha=0.1517, lambda=1.159105 ## + Fold09.Rep5: alpha=0.3660, lambda=0.692297 ## - Fold09.Rep5: alpha=0.3660, lambda=0.692297 ## + Fold09.Rep5: alpha=0.2080, lambda=0.003654 ## - Fold09.Rep5: alpha=0.2080, lambda=0.003654 ## + Fold10.Rep5: alpha=0.4004, lambda=0.002439 ## - Fold10.Rep5: alpha=0.4004, lambda=0.002439 ## + Fold10.Rep5: alpha=0.1857, lambda=1.109010 ## - Fold10.Rep5: alpha=0.1857, lambda=1.109010 ## + Fold10.Rep5: alpha=0.9054, lambda=0.120703 ## - Fold10.Rep5: alpha=0.9054, lambda=0.120703 ## + Fold10.Rep5: alpha=0.5759, lambda=1.247636 ## - Fold10.Rep5: alpha=0.5759, lambda=1.247636 ## + Fold10.Rep5: alpha=0.2560, lambda=0.003753 ## - Fold10.Rep5: alpha=0.2560, lambda=0.003753 ## + Fold10.Rep5: alpha=0.7879, lambda=0.195914 ## - Fold10.Rep5: alpha=0.7879, lambda=0.195914 ## + Fold10.Rep5: alpha=0.4018, lambda=0.086926 ## - Fold10.Rep5: alpha=0.4018, lambda=0.086926 ## + Fold10.Rep5: alpha=0.1517, lambda=1.159105 ## - Fold10.Rep5: alpha=0.1517, lambda=1.159105 ## + Fold10.Rep5: alpha=0.3660, lambda=0.692297 ## - Fold10.Rep5: alpha=0.3660, lambda=0.692297 ## + Fold10.Rep5: alpha=0.2080, lambda=0.003654 ## - Fold10.Rep5: alpha=0.2080, lambda=0.003654 ## Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, : There were missing values in resampled performance measures. ## Aggregating results ## Selecting tuning parameters ## Fitting alpha = 0.208, lambda = 0.00365 on full training set # Best tuning parameter elastic_reg$bestTune ## alpha lambda ## 3 0.2079599 0.003654144 # Make predictions on training set predictions_train &lt;- predict(elastic_reg, x) eval_results(y_train, predictions_train, train) ## RMSE Rsquare ## 1 0.7897507 0.375736 # Make predictions on test set predictions_test &lt;- predict(elastic_reg, x_test) eval_results(y_test, predictions_test, test) ## Warning in mean.default(true): argument is not numeric or logical: returning NA ## RMSE Rsquare ## 1 0 NaN 5.14 Load Data We have taken a data-set from Kaggle: https://www.kaggle.com/uciml/red-wine-quality-cortez-et-al-2009 This data-set inlcudes the measurements from the wine along with its quality rating. wine&lt;-read.table(&quot;data/winequality-red.csv&quot;,stringsAsFactors = FALSE, sep=&quot;,&quot;,header = TRUE) wine$quality&lt;-as.factor(wine$quality) "],["partitition-data-into-training-and-test-data.html", "Chapter 6 Partitition Data into training and test data", " Chapter 6 Partitition Data into training and test data set.seed(123) ind &lt;- sample(2, nrow(wine), replace=TRUE, prob=c(0.7, 0.3)) train &lt;- wine[ind==1, ] test &lt;- wine[ind==2,] "],["random-forest.html", "Chapter 7 Random Forest", " Chapter 7 Random Forest set.seed(444) # quality is a function of all other variables rf &lt;- randomForest(quality~., data=train) print(rf) ## ## Call: ## randomForest(formula = quality ~ ., data = train) ## Type of random forest: classification ## Number of trees: 500 ## No. of variables tried at each split: 3 ## ## OOB estimate of error rate: 33.27% ## Confusion matrix: ## 3 4 5 6 7 8 class.error ## 3 0 0 5 2 0 0 1.0000000 ## 4 0 0 24 13 0 0 1.0000000 ## 5 0 0 386 95 1 0 0.1991701 ## 6 0 1 114 296 31 0 0.3303167 ## 7 0 0 7 72 70 0 0.5302013 ## 8 0 0 0 7 3 0 1.0000000 THe reults show that the out of bag error rate is 33.27%. The model was most inaccurate when predicting wines with a quality values of 3, 4, and 8 with a 100% error rate. It was most accurate when predicting wines with a quality of 5, 19% error rate. "],["predicition-and-confusion-matrix-train-data.html", "Chapter 8 Predicition and COnfusion matrix - train data", " Chapter 8 Predicition and COnfusion matrix - train data p1 &lt;- predict(rf, train) head(p1) # predicted values ## 1 3 6 7 9 10 ## 5 5 5 5 7 5 ## Levels: 3 4 5 6 7 8 head(train$quality) # actual values ## [1] 5 5 5 5 7 5 ## Levels: 3 4 5 6 7 8 Coincidentally, all of the first 6 predictions were 100% accurate. #install.packages(&#39;caret&#39;, dependencies = TRUE) confusionMatrix(p1, train$quality ) ## Confusion Matrix and Statistics ## ## Reference ## Prediction 3 4 5 6 7 8 ## 3 7 0 0 0 0 0 ## 4 0 37 0 0 0 0 ## 5 0 0 482 0 0 0 ## 6 0 0 0 442 0 0 ## 7 0 0 0 0 149 0 ## 8 0 0 0 0 0 10 ## ## Overall Statistics ## ## Accuracy : 1 ## 95% CI : (0.9967, 1) ## No Information Rate : 0.4277 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 1 ## ## Mcnemar&#39;s Test P-Value : NA ## ## Statistics by Class: ## ## Class: 3 Class: 4 Class: 5 Class: 6 Class: 7 Class: 8 ## Sensitivity 1.000000 1.00000 1.0000 1.0000 1.0000 1.000000 ## Specificity 1.000000 1.00000 1.0000 1.0000 1.0000 1.000000 ## Pos Pred Value 1.000000 1.00000 1.0000 1.0000 1.0000 1.000000 ## Neg Pred Value 1.000000 1.00000 1.0000 1.0000 1.0000 1.000000 ## Prevalence 0.006211 0.03283 0.4277 0.3922 0.1322 0.008873 ## Detection Rate 0.006211 0.03283 0.4277 0.3922 0.1322 0.008873 ## Detection Prevalence 0.006211 0.03283 0.4277 0.3922 0.1322 0.008873 ## Balanced Accuracy 1.000000 1.00000 1.0000 1.0000 1.0000 1.000000 There were no misclassifications of our training data, our model was 100% accurate. THe reason for the large discrepancy between accuracy markers for the OOB and the confusion matrix is that the confusion matrix for p1 is base on the training data random forest modelso it has already seen the training data data points. "],["predicition-and-confusion-matrix-test-data.html", "Chapter 9 Predicition and COnfusion matrix - test data", " Chapter 9 Predicition and COnfusion matrix - test data p2 &lt;- predict(rf, test) head(p2) # predicted values ## 2 4 5 8 11 16 ## 5 5 5 5 5 5 ## Levels: 3 4 5 6 7 8 head(test$quality) # actual values ## [1] 5 6 5 7 5 5 ## Levels: 3 4 5 6 7 8 This model was able to predict 4 out of 6 of the first values accurately. confusionMatrix(p2, test$quality ) ## Confusion Matrix and Statistics ## ## Reference ## Prediction 3 4 5 6 7 8 ## 3 0 1 0 0 0 0 ## 4 0 0 0 0 0 0 ## 5 2 8 161 51 3 0 ## 6 1 6 36 132 15 4 ## 7 0 1 2 13 32 3 ## 8 0 0 0 0 0 1 ## ## Overall Statistics ## ## Accuracy : 0.6907 ## 95% CI : (0.6468, 0.7321) ## No Information Rate : 0.4216 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.4985 ## ## Mcnemar&#39;s Test P-Value : NA ## ## Statistics by Class: ## ## Class: 3 Class: 4 Class: 5 Class: 6 Class: 7 Class: 8 ## Sensitivity 0.000000 0.0000 0.8090 0.6735 0.6400 0.125000 ## Specificity 0.997868 1.0000 0.7656 0.7754 0.9550 1.000000 ## Pos Pred Value 0.000000 NaN 0.7156 0.6804 0.6275 1.000000 ## Neg Pred Value 0.993631 0.9661 0.8462 0.7698 0.9572 0.985138 ## Prevalence 0.006356 0.0339 0.4216 0.4153 0.1059 0.016949 ## Detection Rate 0.000000 0.0000 0.3411 0.2797 0.0678 0.002119 ## Detection Prevalence 0.002119 0.0000 0.4767 0.4110 0.1081 0.002119 ## Balanced Accuracy 0.498934 0.5000 0.7873 0.7244 0.7975 0.562500 "],["error-rate-in-random-forest-model.html", "Chapter 10 Error Rate in Random Forest Model", " Chapter 10 Error Rate in Random Forest Model plot(rf) THe model has a drop off after about 200 trees and then is more or less constant, therefore, we can adjust tune our model. "],["tune-mtry.html", "Chapter 11 Tune mtry", " Chapter 11 Tune mtry t &lt;- tuneRF(train[,-12], train[,12], stepFactor = 0.5, plot=TRUE, ntreeTry = 100, trace=TRUE, improve=0.05) ## mtry = 3 OOB error = 33.63% ## Searching left ... ## mtry = 6 OOB error = 34.34% ## -0.02110818 0.05 ## Searching right ... ## mtry = 1 OOB error = 33.63% ## 0 0.05 So this means that the model hits its lowest error rate when mtry=3, so we can then go back and adjust our model to reflect this new mtry value. "],["random-forest-1.html", "Chapter 12 Random Forest", " Chapter 12 Random Forest set.seed(444) # quality is a function of all other variables rf &lt;- randomForest(quality~., data=train, ntree=200, mTry=3, importance=TRUE, proximity=TRUE) print(rf) ## ## Call: ## randomForest(formula = quality ~ ., data = train, ntree = 200, mTry = 3, importance = TRUE, proximity = TRUE) ## Type of random forest: classification ## Number of trees: 200 ## No. of variables tried at each split: 3 ## ## OOB estimate of error rate: 32.65% ## Confusion matrix: ## 3 4 5 6 7 8 class.error ## 3 0 0 5 2 0 0 1.0000000 ## 4 0 0 24 13 0 0 1.0000000 ## 5 0 2 387 92 1 0 0.1970954 ## 6 0 0 115 299 27 1 0.3235294 ## 7 0 0 5 71 73 0 0.5100671 ## 8 0 0 0 5 5 0 1.0000000 Our original OOB estimate of error rate was 33.27% and now it is 32.65%, so it was improved by about 0.5%. "],["rerun-predicition-and-confusion-matrix-train-data.html", "Chapter 13 Rerun Predicition and Confusion matrix - train data", " Chapter 13 Rerun Predicition and Confusion matrix - train data p1 &lt;- predict(rf, train) head(p1) # predicted values ## 1 3 6 7 9 10 ## 5 5 5 5 7 5 ## Levels: 3 4 5 6 7 8 head(train$quality) # actual values ## [1] 5 5 5 5 7 5 ## Levels: 3 4 5 6 7 8 Coincidentally, all of the first 6 predictions were 100% accurate. confusionMatrix(p1, train$quality ) ## Confusion Matrix and Statistics ## ## Reference ## Prediction 3 4 5 6 7 8 ## 3 7 0 0 0 0 0 ## 4 0 37 0 0 0 0 ## 5 0 0 482 0 0 0 ## 6 0 0 0 442 0 0 ## 7 0 0 0 0 149 0 ## 8 0 0 0 0 0 10 ## ## Overall Statistics ## ## Accuracy : 1 ## 95% CI : (0.9967, 1) ## No Information Rate : 0.4277 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 1 ## ## Mcnemar&#39;s Test P-Value : NA ## ## Statistics by Class: ## ## Class: 3 Class: 4 Class: 5 Class: 6 Class: 7 Class: 8 ## Sensitivity 1.000000 1.00000 1.0000 1.0000 1.0000 1.000000 ## Specificity 1.000000 1.00000 1.0000 1.0000 1.0000 1.000000 ## Pos Pred Value 1.000000 1.00000 1.0000 1.0000 1.0000 1.000000 ## Neg Pred Value 1.000000 1.00000 1.0000 1.0000 1.0000 1.000000 ## Prevalence 0.006211 0.03283 0.4277 0.3922 0.1322 0.008873 ## Detection Rate 0.006211 0.03283 0.4277 0.3922 0.1322 0.008873 ## Detection Prevalence 0.006211 0.03283 0.4277 0.3922 0.1322 0.008873 ## Balanced Accuracy 1.000000 1.00000 1.0000 1.0000 1.0000 1.000000 Again the accuracy is 100% but this is due to the training data already being seen by the model. "],["rerun-predicition-and-confusion-matrix-test-data.html", "Chapter 14 Rerun Predicition and COnfusion matrix - test data", " Chapter 14 Rerun Predicition and COnfusion matrix - test data p2 &lt;- predict(rf, test) head(p2) # predicted values ## 2 4 5 8 11 16 ## 5 5 5 5 5 5 ## Levels: 3 4 5 6 7 8 head(test$quality) # actual values ## [1] 5 6 5 7 5 5 ## Levels: 3 4 5 6 7 8 This model was able to predict 4 out of 6 of the first values accurately. confusionMatrix(p2, test$quality ) ## Confusion Matrix and Statistics ## ## Reference ## Prediction 3 4 5 6 7 8 ## 3 0 1 0 0 0 0 ## 4 0 0 0 0 0 0 ## 5 2 8 162 50 3 0 ## 6 1 6 35 132 14 4 ## 7 0 1 2 14 33 3 ## 8 0 0 0 0 0 1 ## ## Overall Statistics ## ## Accuracy : 0.6949 ## 95% CI : (0.6512, 0.7362) ## No Information Rate : 0.4216 ## P-Value [Acc &gt; NIR] : &lt; 2.2e-16 ## ## Kappa : 0.5065 ## ## Mcnemar&#39;s Test P-Value : NA ## ## Statistics by Class: ## ## Class: 3 Class: 4 Class: 5 Class: 6 Class: 7 Class: 8 ## Sensitivity 0.000000 0.0000 0.8141 0.6735 0.66000 0.125000 ## Specificity 0.997868 1.0000 0.7692 0.7826 0.95261 1.000000 ## Pos Pred Value 0.000000 NaN 0.7200 0.6875 0.62264 1.000000 ## Neg Pred Value 0.993631 0.9661 0.8502 0.7714 0.95943 0.985138 ## Prevalence 0.006356 0.0339 0.4216 0.4153 0.10593 0.016949 ## Detection Rate 0.000000 0.0000 0.3432 0.2797 0.06992 0.002119 ## Detection Prevalence 0.002119 0.0000 0.4767 0.4068 0.11229 0.002119 ## Balanced Accuracy 0.498934 0.5000 0.7917 0.7280 0.80630 0.562500 Overall, there was only a 0.5% increase in accuracy for the test data. However, there were improvements in sensitify for Class 5 and Class 7. "],["number-of-nodes-on-the-trees.html", "Chapter 15 Number of Nodes on the trees", " Chapter 15 Number of Nodes on the trees hist(treesize(rf), main = &quot;No. of nodes for the trees&quot;, col=&quot;blue&quot;) # Variable Importance varImpPlot(rf, main=&quot;Variable Importance&quot;) This tells us that alcohol has the greatest importance in our model. Removing this variable would result in a 30% mean decrease in accuracy. On the opposite end of the spectrum the pH has almost no affect in the models accuracy. "],["partial-dependence-plots.html", "Chapter 16 Partial Dependence Plots 16.1 Introduction 16.2 Load Data 16.3 Clean and Normalize the data. 16.4 Data Splice 16.5 Model Evaluation 16.6 Optimization", " Chapter 16 Partial Dependence Plots Produces partial plot for alcohol in training set data/rf model for classication 5 aka quality =5. partialPlot(rf, train, alcohol, 5) This plot tells u that when alcohol is less than 11% it predicts classification 5 more strongly than when it is greater than 11%. partialPlot(rf, train, alcohol, 7) This plot tells us that when alcohol is greater than 10% it predicts classification 7 more strongly than when it is less than 10%. 16.1 Introduction Just planning to use this file to walk through some tutorials of k-means clustering I found. 16.2 Load Data We have taken a data-set from Kaggle: https://www.kaggle.com/uciml/red-wine-quality-cortez-et-al-2009 This data-set inlcudes the measurements from the wine along with its quality rating. wine&lt;-read.table(&quot;data/winequality-red.csv&quot;,stringsAsFactors = FALSE, sep=&quot;,&quot;,header = TRUE) head(wine) ## fixed.acidity volatile.acidity citric.acid residual.sugar chlorides free.sulfur.dioxide total.sulfur.dioxide density pH sulphates alcohol ## 1 7.4 0.70 0.00 1.9 0.076 11 34 0.9978 3.51 0.56 9.4 ## 2 7.8 0.88 0.00 2.6 0.098 25 67 0.9968 3.20 0.68 9.8 ## 3 7.8 0.76 0.04 2.3 0.092 15 54 0.9970 3.26 0.65 9.8 ## 4 11.2 0.28 0.56 1.9 0.075 17 60 0.9980 3.16 0.58 9.8 ## 5 7.4 0.70 0.00 1.9 0.076 11 34 0.9978 3.51 0.56 9.4 ## 6 7.4 0.66 0.00 1.8 0.075 13 40 0.9978 3.51 0.56 9.4 ## quality ## 1 5 ## 2 5 ## 3 5 ## 4 6 ## 5 5 ## 6 5 16.3 Clean and Normalize the data. Our dataset already contains only predictive values and output, so we do not need to remove any descriptive columns. We must normalize the values within the dataset to avoid any bias and remove the output variable (quality) since its the prediction. #Normalization normalize &lt;- function(x) { return ((x - min(x)) / (max(x) - min(x))) } wine.normal &lt;- as.data.frame(lapply(wine[,1:11], normalize)) head(wine.normal) ## fixed.acidity volatile.acidity citric.acid residual.sugar chlorides free.sulfur.dioxide total.sulfur.dioxide density pH sulphates ## 1 0.2477876 0.3972603 0.00 0.06849315 0.1068447 0.1408451 0.09893993 0.5675477 0.6062992 0.1377246 ## 2 0.2831858 0.5205479 0.00 0.11643836 0.1435726 0.3380282 0.21554770 0.4941263 0.3622047 0.2095808 ## 3 0.2831858 0.4383562 0.04 0.09589041 0.1335559 0.1971831 0.16961131 0.5088106 0.4094488 0.1916168 ## 4 0.5840708 0.1095890 0.56 0.06849315 0.1051753 0.2253521 0.19081272 0.5822320 0.3307087 0.1497006 ## 5 0.2477876 0.3972603 0.00 0.06849315 0.1068447 0.1408451 0.09893993 0.5675477 0.6062992 0.1377246 ## 6 0.2477876 0.3698630 0.00 0.06164384 0.1051753 0.1690141 0.12014134 0.5675477 0.6062992 0.1377246 ## alcohol ## 1 0.1538462 ## 2 0.2153846 ## 3 0.2153846 ## 4 0.2153846 ## 5 0.1538462 ## 6 0.1538462 16.4 Data Splice Since our data-set our research question involves prediction will will randomly select a portion of data to use for overall effectiveness measurement. We plan to save about \\(5\\%\\) of the data for testing which ends up being \\(80\\) values. set.seed(123) dat.d &lt;- sample(1:nrow(wine.normal),size=nrow(wine.normal)*0.8,replace = FALSE) #random selection of 90% data. train.wine &lt;- wine.normal[dat.d,] # 90% training data test.wine &lt;- wine.normal[-dat.d,] # remaining 10% test data #Creating seperate dataframe for &#39;Quality&#39; feature which is our target. train.quality_label &lt;- wine[dat.d,12] test.quality_label &lt;-wine[-dat.d,12] Next, were going to calculate the number of observations in the training data set. The reason were doing this is that we want to initialize the value of K in the KNN model. One of the ways to find the optimal K value is to calculate the square root of the total number of observations in the data set. This square root will give you the K value. NROW(train.quality_label) ## [1] 1279 sqrt(NROW(train.quality_label) ) ## [1] 35.76311 The square root of 1493 is around 35.7 well create a model with a K value as 36. knn.36 &lt;- knn(train=train.wine, test=test.wine, cl=train.quality_label, k=36) 16.5 Model Evaluation #Calculate the proportion of correct classification for k =37 ACC.36 &lt;- 100 * sum(test.quality_label == knn.36)/NROW(test.quality_label) ACC.36 ## [1] 58.4375 As shown above, the accuracy for K = 36 is 58.435 16.6 Optimization i=1 k.optm=1 for (i in 1:37){ knn.mod &lt;- knn(train=train.wine, test=test.wine, cl=train.quality_label, k=i) k.optm[i] &lt;- 100 * sum(test.quality_label == knn.mod)/NROW(test.quality_label) k=i cat(k,&#39;=&#39;,k.optm[i],&#39;&#39;) } ## 1 = 61.875 2 = 56.875 3 = 56.875 4 = 61.25 5 = 59.0625 6 = 58.125 7 = 55.625 8 = 57.1875 9 = 57.5 10 = 56.875 11 = 59.0625 12 = 59.375 13 = 58.75 14 = 59.375 15 = 60 16 = 60.3125 17 = 61.25 18 = 60.9375 19 = 60 20 = 59.0625 21 = 59.375 22 = 59.375 23 = 59.6875 24 = 59.0625 25 = 58.125 26 = 58.125 27 = 59.0625 28 = 59.0625 29 = 58.4375 30 = 58.4375 31 = 58.75 32 = 59.375 33 = 60 34 = 60.3125 35 = 59.6875 36 = 59.0625 37 = 59.375 #Accuracy plot plot(k.optm, type=&quot;b&quot;, xlab=&quot;K- Value&quot;,ylab=&quot;Accuracy level&quot;) "]]
